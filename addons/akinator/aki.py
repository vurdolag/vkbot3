from akinator.async_aki import Akinator
from Template import str_yes, str_no, str_back, str_error, str_yes_or_no
from untils import logs, Event
from Addon import Addon, middelware, addon_init

from typing import Optional

keyb = [str_yes, str_no, 'üôÇ–°–∫–æ—Ä–µ–µ –¥–∞%b', 'üôÉ–°–∫–æ—Ä–µ–µ –Ω–µ—Ç%b', 'ü§î–ù–µ –∑–Ω–∞—é%b', str_back]
keyb2 = [str_yes, str_no, str_back]

_msg1 = '–•—Ö–∞—Ö–∞ —è —Ç–∞–∫ –∏ –∑–Ω–∞–ª!\n\n–°—ã–≥—Ä–∞–µ–º –µ—â—ë?\n‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç'
_msg2 = '–≠—Ö –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ...\n\n–°—ã–≥—Ä–∞–µ–º –µ—â—ë?\n‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç'
_msg3 = '–°—ã–≥—Ä–∞–µ–º –µ—â—ë?\n‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç'
_msg4 = '–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {}\n{}\n\n–Ø –≤–µ—Ä–Ω–æ —É–≥–∞–¥–∞–ª?'
_msg5 = '–õ–∞–¥–Ω–æ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üôÇ'
_msg6 = ('{}, –ø—Ä–∏–≤–µ—Ç! –Ø - –ê–∫–∏–Ω–∞—Ç–æ—Ä, —Å–º–æ–≥—É —É–≥–∞–¥–∞—Ç—å –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –∑–∞–≥–∞–¥–∞–µ—à—å.\n\n'
         '–°–ø–æ—Ä–∏–º? ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç')
_msg7 = '–ò–≥—Ä–∞–µ–º?\n‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç'
_id_photo_aki = 'photo-168691465_457243048'

HELLO = 0
START = 1
IN_GAME = 2
END = 3


@addon_init(['!–∞–∫–∏–Ω–∞—Ç–æ—Ä'], 'üå™', False, 1)
class Aki(Addon):
    __slots__ = 'lock', 'aki', 'first_aki', 'lng'

    def __init__(self, username, user_id):
        super(Aki, self).__init__(username, user_id)
        self.lock = 0
        self.aki = Akinator()
        self.first_aki = self.set_condition(self.user_id, 'first_aki', 1, False, 0)
        self.lng = 'ru'

    async def get_aki(self, event: Event) -> str:
        if event.check('–î–ê', '1'):
            txt = 'yes'
        elif event.check('–ù–ï–¢', '2'):
            txt = 'no'
        elif event.check('–ù–ï –ó–ù–ê–Æ', '3'):
            txt = 'idk'
        elif event.check('–°–ö–û–†–ï–ï –î–ê', '4'):
            txt = 'probably'
        elif event.check('–°–ö–û–†–ï–ï –ù–ï–¢', '5'):
            txt = 'pn'
        else:
            txt = 'no'

        if self.lock == 0:
            self.lock = 1
            try:
                self.lng = 'ru'
                return await self.aki.start_game('ru')
            except:
                try:
                    self.lng = 'en'
                    return await self.translate(await self.aki.start_game("en"))
                except:
                    try:
                        self.lng = 'en'
                        return await self.translate(await self.aki.start_game("en2"))
                    except:
                        return str_error

        try:
            if self.aki.progression <= 80:
                #if txt == "b":
                #    x = await self.aki.back()
                #    return await until.translate(x) if self.lng != 'ru' else x
                #else:
                x = await self.aki.answer(txt)
                return await self.translate(x) if self.lng != 'ru' else x

            else:
                return await self.aki.win()

        except:
            logs()
            self.lock = 0
            return str_error

    def end(self, event: Optional[Event] = None):
        self.step = 0
        self.lock = 0
        self.aki = None

    @middelware
    async def mainapp(self, event: Event) -> Event:
        if self.isstep(HELLO, START):
            event.keyboard(*keyb2).attachment(_id_photo_aki)

            if self.first_aki == 0:
                self.first_aki = 1
                return event.answer(_msg6, self.username)

            else:
                return event.answer(_msg7)

        if self.isstep(START):
            if event.check('–î–ê'):
                event.set_typing()
                self.aki = Akinator()
                self.setstep(2)
                a = await self.get_aki(event)
                h = '–û—Ç–ª–∏—á–Ω–æ!' if self.lng == 'ru' else str_error
                return event.answer('{}\n\n{}', h, a).keyboard(*keyb)

            elif event.check('–ù–ï–¢'):
                self.end(event)
                return event.answer(_msg5).keyboard()
            else:
                return event.answer(str_yes_or_no).keyboard(*keyb2)

        if self.isstep(IN_GAME):
            end_answer = await self.get_aki(event)

            if not isinstance(end_answer, str) and isinstance(end_answer, dict):
                url_pix = end_answer.get('absolute_picture_path')
                description = end_answer.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è :(')
                name = end_answer.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏ :(')
                if url_pix:
                    await event.uploads(url_pix)
                self.setstep(END)
                self.lock = 0
                aki_msg = await event.translate(description) if self.lng != 'ru' else description

                return event.answer(_msg4, name, aki_msg).keyboard(*keyb2)
            else:
                return event.answer(end_answer).keyboard(*keyb)

        if self.isstep(END, START):
            self.aki = Akinator()
            if event.check('–î–ê'):
                return event.answer(_msg1).keyboard(*keyb2)

            elif event.check('–ù–ï–¢'):
                return event.answer(_msg2).keyboard(*keyb2)

            else:
                return event.answer(_msg3).keyboard(*keyb2)



