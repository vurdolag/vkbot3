# -*- coding: utf-8 -*-
import ujson as json
from untils import req, until, logs, Event
from Addon import Addon, middelware, addon_init
from Template import str_error, str_back, str_maybe_later
import recompile as rec


_p1 = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É%b'
_p2 = '–ü—Ä–∞–≤–∏–ª–∞%b'
_p3 = '–ü–æ–≤—Ç–æ—Ä%b'

keyb = [_p1, _p2, str_back]
keyb2 = [_p1, str_back]
keyb3 = ['–†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞%b', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞%b', '–°—Ç—Ä–∞–Ω—ã%b', '–ì–æ—Ä–æ–¥–∞%b', str_back]
keyb4 = [_p3, _p2, str_back]
keyb5 = [_p3, '–ó–Ω–∞—á–µ–Ω–∏–µ%b', _p2, str_back]


MOD = [
    ['1', '—Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞', 'rus'],
    ['2', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞', 'eng'],
    ['3', '—Å—Ç—Ä–∞–Ω—ã', 'countries'],
    ['4', '–≥–æ—Ä–æ–¥–∞', 'cities']
]

_L = 7


_msg1 = ('–ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ –±—É–∫–≤—ã –∑–∞–º–µ–Ω—è—é—Ç—Å—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è "_".\n'
         '–ò–≥—Ä–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–æ–≤–µ. –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –±–æ—Ç –∑–∞–º–µ–Ω—è–µ—Ç –µ—é '
         '–ø—Ä–æ–ø—É—Å–∫–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç, —Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–¥–µ—á–∫–æ.\n–ï—Å–ª–∏ —Ü–µ–ª—ã–µ —Å–µ—Ä–¥–µ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å,'
         ' –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–≤–µ—à–µ–Ω–Ω—ã–º. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫—É —É–¥–∞—ë—Ç—Å—è —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, '
         '–æ–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.{}')

_msg2 = '\n\n‚û° 1. –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞\n‚û° 2. –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞\n‚û° 3. –°—Ç—Ä–∞–Ω—ã\n‚û° 4. –ì–æ—Ä–æ–¥–∞\n'
_msg3 = '\n\n‚û° 1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n‚û° 2. –ü—Ä–∞–≤–∏–ª–∞\n‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
_msg4 = '–ö–∞–∫—É—é —Ç–µ–º—É –≤—ã–±–µ—Ä–µ—à—å?{}'
_msg5 = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –í–∏—Å–µ–ª–∏—Ü–∞{}'
_msg6 = '{}\n{}\n\n{}\n\n–ë—ã–ª–æ: {}'
_msg7 = '–£–≤—ã, —Ç–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏!\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {}{}'
_msg8 = '\n\n‚û° 1. –ü–æ–≤—Ç–æ—Ä–∏–º?\n‚û° 2. –ü—Ä–∞–≤–∏–ª–∞\n‚û° 3. –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞'
_msg9 = '–ü–æ–∑–¥–∞–≤–ª—è—é —Ç—ã –≤—ã–≥—Ä–∞–ª{}!{}'
_msg10 = '\n\n‚û° 1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'


_id_photo_lost = 'photo-168691465_457246054'
_id_photo_win = 'photo-168691465_457246055'


@addon_init(['!–≤–∏—Å–µ–ª–∏—Ü–∞'], 'üòµ', False, 1)
class Gallows(Addon):
    __slots__ = 'lives', 'word', 'temp_word', 'about', 'char', 'mod'

    def __init__(self, username, user_id):
        super(Gallows, self).__init__(username, user_id)
        self.lives = 7
        self.word = ''
        self.temp_word = '*'
        self.about = ''
        self.char = ''
        self.mod = 'rus'

    def upd(self):
        self.lives = 7
        self.word = ''
        self.temp_word = '+'
        self.about = ''
        self.char = ''
        self.mod = 'rus'

    async def get_word(self, mod):
        try:
            url = f'https://engine.lifeis.porn/api/words.php?{mod}'
            d = await req.post(url)
            d = json.loads(d.decode('utf-8'))['data']
            return d['word'], d['explanation']

        except:
            logs()
            return str_error

    def word_creater(self, key=''):
        tmp = ''
        key = key.lower()
        for i in self.word.lower():
            if (i == key or i in self.temp_word.lower()) and key:
                tmp += i + ' '
            else:
                tmp += '_ '
        if key not in self.char and key:
            self.char += key + ' '
        return tmp

    def lv(self):
        return 'üíî' * (_L - self.lives) + '‚ù§' * self.lives

    @middelware
    async def mainapp(self, event: Event) -> Event:
        event.text = rec.clear.sub('', event.text).strip()

        if event.check('2', '–ü–†–ê–í–ò–õ–ê', '‚û° –ü–†–ê–í–ò–õ–ê', '–ö–ê–ö') and self.step != 2:
            h = '' if event.support_keyb_inline else _msg10
            return event.answer(_msg1, h).keyboard(*keyb2)

        if self.isstep(4):
            if event.check('1', '–ü–û–í–¢–û–†–ò–ú', '–î–ê', '–ê–ì–ê', '–ü–û–í–¢–û–†', '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£'):
                event.text = '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£'

            elif event.check('3', '–ó–ù–ê–ß–ï–ù–ò–ï', '–ó–ù–ê–ß–ï–ù–ò–ï –°–õ–û–í–ê'):
                if self.mod in ['countries', 'cities']:
                    return event.answer(await until.wiki(self.word)).keyboard(*keyb4)

                else:
                    return event.answer(self.about).keyboard(*keyb4)

            else:
                self.end()
                self.upd()
                return event.answer(str_maybe_later).keyboard()

        if event.check('1', '–ù–ê–ß–ê–¢–¨ –ò–ì–†–£', '–ò–ì–†–ê–¢–¨') and self.step != 2:
            self.setstep(2)
            h = ['', 1] if event.support_keyb_inline else [_msg2, 2]
            return event.answer(_msg4, h[0]).keyboard(*keyb3, tablet=h[1])

        if self.isstep(0, 1):
            h = '' if event.support_keyb_inline else _msg3
            return event.answer(_msg5, h).keyboard(*keyb)

        if self.isstep(2):
            self.upd()
            for i in MOD:
                if event.text.lower() in i:
                    self.mod = i[-1]
                    break

            if self.mod:
                self.setstep(3)
                self.word, self.about = await self.get_word(self.mod)

                self.temp_word = '_ ' * len(self.word)
                out = self.word_creater()
                h = '–ü—Ä–∏—à–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –±—É–∫–≤—É' if self.mod == 'eng' else '–ü—Ä–∏—à–ª–∏ –±—É–∫–≤—É'
                return event.answer(_msg6, h, self.lv(), out, self.char).keyboard(str_back)

            else:
                return event.answer(str_error).keyboard(*keyb3)

        if self.isstep(3):
            out = self.word_creater(event.text.lower()[:1])

            if self.lives < 2 and out == self.temp_word.lower():
                self.setstep(4)
                h = '' if event.support_keyb_inline else _msg8
                return event.answer(_msg7, self.word, h).keyboard(*keyb5, tablet=1).attachment(_id_photo_lost)

            if '_' not in out:
                self.setstep(4)
                h = '' if event.support_keyb_inline else _msg8
                return event.answer(_msg9, event.gender("", "–∞"), h
                                    ).keyboard(*keyb5, tablet=1).attachment(_id_photo_win)

            h = '–ü—Ä–∏—à–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –±—É–∫–≤—É' if self.mod == 'eng' else '–ü—Ä–∏—à–ª–∏ –±—É–∫–≤—É'

            if out != self.temp_word.lower():
                self.temp_word = out
                return event.answer(_msg6, h, self.lv(), out, self.char).keyboard(str_back)

            else:
                self.lives -= 1
                return event.answer(_msg6, h, self.lv(), out, self.char).keyboard(str_back)

        return event.answer('–ß—Ç–æ - —Ç–æ –Ω–µ –ø–æ–π–º—É...')



























