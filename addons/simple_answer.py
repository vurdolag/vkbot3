import random as rnd
from addons.info_text import _HELP, _helpkeyboard
from addons.joke.joke import cmd_clear
from untils import subscribe, Event, Global
from Sqlbd import Sqlbd
from Template import str_back
import re
import addons.info_text as IT
from addons.emodji import EMOJI_UNICODE
from asyncio import create_task, gather

EMOJI_UNICODE = tuple(EMOJI_UNICODE.values())

ans = [

    [r'(–≥–æ–ª(–æ|—ã)(–∏|–µ).{,18}—Ñ–æ—Ç|—Ñ–æ—Ç(–æ|–∫–∏|–∫—É|—á–∫—É).{,18}–≥–æ–ª(–æ|—ã)(–∏|–µ))', '–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≥–æ–ª—ã–µ —Ñ–æ—Ç–∫–∏...\n\n–ü–∏—à–∏ '
                                                                      '"–ü–û–ú–û–©–¨" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.'],

    [r'(–ø(–∞|–æ)–∫–∞|–ø–æ–∫–∏|–ø—Ä(–∞|–æ)—â–∞–π|–¥(–∞|–æ)—Å–≤–∏–¥–∞–Ω–∏—è)', "–ü–æ–∫–∞! üòâ"],

    [r'(–∫–∞(–∫|–≥|).{,16}–¥(–µ|–∏)–ª(–∞|—ã)|–¥(–µ|–∏)–ª(–∞|—ã).{,16}–∫–∞(–∫|–≥|))', ["–û—Ç–ª–∏—á–Ω–æ! üòè", '–•–æ—Ä–æ—à–æ! ‚ò∫',
                                                                  '–î–µ–ª–∞ —Ö–æ—Ä–æ—à–æ üòé',
                                                                  '–£ –±–æ—Ç–∞ –¥–µ–ª–∞ —Ö–æ—Ä–æ—à–æ üëç']],

    [r'((—á—Ç–æ|—á—ë|—á–µ|—á–æ|—á–∏—Ç–æ|—à–æ).{,12}–¥–µ–ª(–∞|–æ)–µ—à)', '–û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üôÉ'],

    [r'(—Ç—ã.{,8}–∫—Ç–æ|–∫—Ç–æ.{,8}—Ç—ã|—á—Ç–æ.{,8}—Ç—ã —Ç–∞–∫–æ–µ)', '–Ø –±–æ—Ç ü§ñ\n\n–°–æ–∑–¥–∞–Ω –ø–æ–º–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–±—è, '
                                                  '–ø–∏—à–∏ "–ü–û–ú–û–©–¨" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã'],

    [r'(–∑(–∞|–æ)—á–µ–º|–ø(–∞|–æ)—á(–µ|–∏)–º—É)', '–ü–æ—Ç–æ–º—É —á—Ç–æ —è –±–æ—Ç ü§ñ\n\n–°–æ–∑–¥–∞–Ω –ø–æ–º–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å —Ç–µ–±—è, –ø–∏—à–∏ "–ü–û–ú–û–©–¨" '
                                    '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã'],

    [r'–ø(–æ|–∞)–Ω(–∏|–µ)–º–∞–π', '–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é, –Ω–æ —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç...'],

    [r'(—ç—Ç(–æ|–∞)|–∏).{,8}–∑–Ω–∞—á(–∏|–µ)—Ç', '–ê–∞–∞–∞... —Ç–µ–ø–µ—Ä—å –ø–æ–Ω—è—Ç–Ω–æ.'],

    [r'—Ç—ã.{,10}–±–æ—Ç', '–•–º–º... –≤–µ–¥—å –∏ –ø—Ä–∞–≤–¥–∞ —è –±–æ—Ç üòÜ'],

    [r'(—ç–π|–∞–ª–æ|–∞–ª–ª–æ|^–∞—É$)', '–®–û? üòé', '', 'photo-168691465_457244642'],

    [r'—Ç—Ä–∞—Ö–∞—Ç', '–í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ "–¢—Ä–∞—Ö–∞—Ç—å"'],

    [r'—Å–µ–∫—Å', ['C–µ–∫—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è LOL üòÇ', '–°–µ–∫—Å —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ üòÇ'], '', 'photo-168691465_457245495'],

    [r'(—Ö–æ—Ä–æ—à–æ|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä|–ª–∞–¥–Ω–æ|—É–≥—É|^ok$|^–æ–∫$|^–¥–∞$|^–Ω–µ—Ç$|!–Ω–µ —Ö–æ—á—É)', ['üòá', 'üòù', '‚ò∫', 'üëç']],

    [r'–±–æ—Ç', f'–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã...\n\n{_HELP}', _helpkeyboard],

    [r'–Ω(–∞|–æ)—á–∞—Ç(—å|)', '–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?\n\n–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.', _helpkeyboard],

    [r'(–ø(–∞–π|–∏)—Ç–æ–Ω|python)', '–¢–æ—á–Ω—è–∫ –±—Ä–æ', '', 'video-159946608_456239078'],

    [r'^–Ω–µ—Ç$', '–ü–æ—á–µ–º—É? =('],

    [r'(–ø–æ—Ä–Ω(–æ|—É—Ö–∞)|gjhyj)', '', '', ['video201965023_456239151', 'video116949640_169554749',
                                      'video-59014018_456240514', 'video-165298569_456239079',
                                      'video-146305289_456239331']],

    [r'(–∏{3,}|–æ{4,}|–∞{3,}|—Ä{3,})', '–ó–∞—á–µ–º —Å—Ç–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–¥–Ω–æ–π –±—É–∫–≤—ã?'],

    [r'–∞(\W|)—É(\W|)–µ', '–ê.–£.–ï. –¥–ª—è –∏–º–±–µ—Ü–∏–ª–æ–≤...', '', 'photo-168691465_457245669'],

    [r'(GO|–ì–û|–ì–û–£)', _HELP, _helpkeyboard],

    [r'–ø(–µ|–∏)–∑–¥—É–π', '–Ø –Ω–µ –º–æ–≥—É –ø–∏–∑–¥–æ–≤–∞—Ç—å, —è–∂ –±–æ—Ç...'],

    [r'—Å(–∏|–µ)—Å—å–∫–∏', '–°–∏—Å—å–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å...'],

    [r'–º—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤—É', ['–º—ã –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤—É –±–ª–∞ –±–ª–∞...', '–ù–ï–¢'], '', ['video323393008_456239663',
                                                                                        'video-146305289_456239298',
                                                                                        'video-146305289_456239331']],

    [r'–∞–ª–∏—Å–∞', '–¢—É—Ç –Ω–µ—Ç –ê–ª–∏—Å—ã\n\n–õ—É—á—à–µ –ø–∏—à–∏: –ú–µ–Ω—é –∏–ª–∏ –ü–æ–º–æ—â—å'],

    [r'(–≥—É–≥(–æ|)–ª|google|—Å–∏—Ä–∏)', '–û–±–∏–∂–∞–µ—à—å =)\n\n–õ—É—á—à–µ –ø–∏—à–∏: –ú–µ–Ω—é –∏–ª–∏ –ü–æ–º–æ—â—å'],

    [r'^–∫–∞–∫$', '–ü–∏—à–∏ - –ü–æ–¥—Ä–æ–±–Ω–µ–µ\n\n–∏ —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å...', ['‚öô –ü–æ–¥—Ä–æ–±–Ω–µ–µ%g', '‚öô –ú–µ–Ω—é%r']],

    [r'—á—Ç–æ —Ç—ã –¥—É–º.–µ—à', '–Ø –¥—É–º–∞—é —á—Ç–æ —á–µ–ª–æ–≤–µ–∫–∏ —ç—Ç–æ –±–∏–æ—Ä–æ–±–æ—Ç—ã... –∏ —ç—Ç–æ –Ω–∞—Å —Å –≤–∞–º–∏ —Ä–æ–¥–Ω–∏—Ç']

]
cmd = '$|^'.join(cmd_clear.lower().split(','))

_api_ans = ["—Ç–∞–∫ —Ç–æ—á–Ω–æ –∫—ç–ø", "—Ö–º, –Ω—É –∫–∞–∫ –∑–Ω–∞–µ—à—å", "–¥–∞? –Ω—É –ª–∞–¥–Ω", "—Ñ—É –∫–∞–∫–∞—è –≥–∞–¥–æ—Å—Ç—å, –µ—Å—Ç—å –µ—â—ë? ^-^",
            "–∞ –∑–∞—á–µ–º? ...–Ω—É –ª–∞–Ω", "–æ–∫–µ–π–∂–∏—à—å", "—Ç–∞–∫–∏ –¥–∞", "–æ–∫, —è —Ç–∞–∫ –∏ –∑–Ω–∞–ª", "–ª–æ–≥–∏—á–Ω–æ)", "–∞ —è –¥—É–º–∞—é —á—Ç–æ...",
            "—Ç—ã –∑–¥–µ—Å—å –±–æ—Å—Å", "–º–æ—è —Ç–≤–æ—è –ø–æ–≤–µ–Ω—É—é—Å—è", "–æ—Ç—Å—ã–ø—Ç–µ –º–Ω–µ —Ç–æ–∂–µ –µ—â—ë —ç—Ç–æ–π —Ö–µ—Ä–Ω–∏)", "–æ—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ –ø–∏–≤–∫—É!",
            "–ù–ï–¢! –Ω—É —Ç–æ–µ—Å—Ç—å –¥–∞", "–º–æ—è —Ç–≤–æ—è —Å–æ–≥–ª–∞—Å–Ω—ã–π", "ok", "–º–Ω–µ –±—ã —Ç–≤–æ—é —É–≤–µ—Ä–Ω–æ—Å—Ç—å", "—Å–ª—É—à–∞—é—Å—å –∏ –ø–æ–≤–∏–Ω—É—é—Å—å",
            "–≤–∞–ª–∞—Ä –¥–æ—Ö–∞—ç—Ä–∏—Å", "–æ, –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –º–Ω–µ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ", "—è —Å—á–∞—Å—Ç–ª–∏–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç—å –ª—é–±–æ–µ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ",
            "–ø—Ä–µ–∫–ª–æ–Ω—è—é—Å—å –ø–µ—Ä–µ–¥ –í–∞–º–∏"]

_jackie_rep = ["–¥–∞, –º–æ—è –≥–æ—Å–ø–æ–∂–∞", "–ø–æ–≤–∏–Ω—É—Å—å, –º–æ—è –≥–æ—Å–ø–æ–∂–∞",
               "–æ, %name% –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è, —è –≤ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–∏", "–æ –¥–∞, –±–æ–≥–∏–Ω—è", "%name% –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞"]


_BD_MAIL = Sqlbd('mail')


class Simple:
    __slots__ = 'bot'
    
    def __init__(self, bot):
        self.bot = bot
    
    def first(self, event: Event):
        if self.bot.ban > 2:
            return event.answer(f"–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –º–∞—Ç! üò°")

        if self.bot.RE(r'^—Å—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∞$', event, lock=False):
            _BD_MAIL.put(event.user_id, event.group_id, sync=True)
            return event.answer('–ë–æ–ª—å—à–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç, —á—Ç–æ–±—ã –Ω–æ–≤–æ—Å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ '
                                '–ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤–Ω–æ–≤—å –∫–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∞').keyboard('–°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∞%r')

        if self.bot.RE(r'^—Å—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∞$', event, lock=False):
            _BD_MAIL.delete(f"id = {event.user_id} and id_group = {event.group_id}", sync=True)
            return event.answer('–¢–µ–ø–µ—Ä—å –Ω–æ–≤–æ—Å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å,'
                                ' —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞: —Å—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∞').keyboard('–°—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∞%r')

        if self.bot.RE(r'–æ—Ç–ø–∏—Å(–∞—Ç(|—å)—Å—è|–∫–∞)', event, lock=False):
            keys = event.text.lower().split()
            if len(keys) < 2:
                return event.answer('–ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–º–µ—Ä:\n\n–æ—Ç–ø–∏—Å–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø')

            key = keys[1]

            d = subscribe.delete(key, event)
            if d:
                return event.answer(f'–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {d} –ø–æ–¥–ø–∏—Å–æ–∫ "{key}"')
            else:
                return event.answer(f'–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ - "{key}"')

        return False
    
    def answer(self, event: Event):
        # –æ—Ç–≤–µ—Ç –±–µ–∑ –ª–æ–≥–∏–∫–∏
        for i in ans:
            if event.check_re(i[0]):
                try:
                    if i[2]:
                        event.keyboard(*i[2])
                    else:
                        event.keyboard()

                except:
                    event.keyboard()

                try:
                    if isinstance(i[3], list):
                        event.attachment(rnd.choice(i[3]))
                    else:
                        event.attachment(i[3])
                except:
                    pass

                if isinstance(i[1], list):
                    return event.answer(rnd.choice(i[1]))

                return event.answer(i[1])
        return None

    async def addon(self, event: Event):
        # –æ—Ç–≤–µ—Ç—ã —Å –ª–æ–≥–∏–∫–æ–π
        if not self.bot.active_addon and not event.from_chat and event.stoper():
            event.text_out = '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'
            return self.bot.help(event, add=True, now=True)

        if self.bot.RE(r'((—á—Ç–æ|—á(–µ|—ë|–æ)).{,10}(—É–º(–µ|–µ–µ)—à(—å|)|(—Å|)–º–æ–∂(–µ|–∏|—ã)—à(—å|))|–ø–æ–¥—Ä–æ–±–Ω(e|–µ–µ))', event):
            event.keyboard('‚öô –ß–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å%g', str_back, tablet=1)
            return event.answer('https://vk.com/@kreo_0-komandy-bota')

        if self.bot.RE(r'(—Ä–∞(—Å|—Å—Å)–∫(–∞|–æ)–∂(–∏|—ã)|^—Ñ–∞–∫—Ç$|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ|–µ—â. —Ñ–∞–∫—Ç$)', event):
            return event.answer(await self.bot.FACT.get()).keyboard('‚û° –ï–©–ï –§–ê–ö–¢', str_back)

        if self.bot.RE(f'(—à—É—Ç–∫(–∞|–æ)–Ω–∏|–ø(–∞|–æ)—à—É—Ç–∏|—é–º(–∞|–æ)—Ä|^—à—É—Ç–∫–∞$|^{cmd}$)', event):
            if not event.text.lower() in cmd:
                event.text = '!–∞–Ω–µ–∫–¥–æ—Ç'
            else:
                event.text = f'!{event.text}'
            return await self.bot.JOKE.get(event)

        if self.bot.RE(r'(^–≤–∏–∫–∏|–≤–∏–∫–∏–ø–µ–¥–∏—è|wiki)', event, del_pat=True):
            return event.answer(await event.wiki(event.text))

        if self.bot.RE(r'(–æ–±—Ä(–∞|–æ)–±–æ—Ç(–æ|–∞)|—ç(—Ñ|—Ñ—Ñ)–µ–∫—Ç(—ã|))', event):
            IMG = self.bot.IMG
            event.text, IMG.step = ('–ê–†–¢', 1) if not event.attachments else (event.text, 2)
            self.bot.active_addon = IMG
            return await IMG.mainapp(event)

        if self.bot.RE(r'(^–æ—Ä—Ñ–æ|^–ø—Ä–æ–≤–µ—Ä—å|^–æ—à–∏–±–∫–∏)', event, del_pat=True):
            return event.answer(await event.checker_text(event.text))

        if self.bot.RE(r'(^‚è© –µ—â—ë –∞—Ä—Ç|^–∞—Ä—Ç|–∫–∞—Ä—Ç–∏–Ω–∫|^—Ñ–æ—Ç–æ|–∫—Ä–µ(–∞|–æ)—Ç–∏–≤)', event, del_pat=True):
            await self.bot.IMG.get_art(event.text, event)
            msg = '–û—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –∏—â–µ—à—å.' if not event.text else ''
            msg = event.text_out if not event.attachments_out else msg
            return event.answer(msg).keyboard(f'‚è© –ï—â—ë –∞—Ä—Ç {event.text}%b', str_back, tablet=1)

        if self.bot.RE(r'(^—Ä–∞—Å–∫–ª–∞–¥–∫–∞|^\?\!)', event, lock=False, del_pat=True):
            self.bot.TXT.keyboard_layout(event)
            return event.keyboard(str_back)

        if self.bot.RE(r'(–ø(–∞|–æ)–≥–æ–¥–∞|^–ø–≥–¥|^\?\*)', event, lock=False, del_pat=True):
            await self.bot.WEATHER.get(event)
            return event.keyboard(str_back)

        if self.bot.RE(r'(^(–æ|–∞)–∑–≤—É—á(—å|)|^–æ–∑–≤|^–≥–æ–ª–æ—Å|^\?\=)', event, lock=False, del_pat=True):
            await self.bot.VOICE.synthesize(event, speaker='random')
            return event.keyboard(str_back)

        if self.bot.RE(r'(^–ø–µ—Ä(–µ|–∏)–≤–æ–¥|^\?\?)', event, lock=False, del_pat=True):
            event.text = await event.checker_text(event.text)
            lang = event.text.split()[:2]
            _translator = self.bot.TRANSLATOR
            if len(lang) > 0 and lang[0].lower() in _translator.get_lang_list():
                await _translator.choise_lang(' '.join(lang), event)
                event.re_del(' '.join(lang))
            await _translator.get_translate(event)
            return event.keyboard(str_back)

        if self.bot.RE(r'!—Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', event):
            _translator = self.bot.TRANSLATOR
            _translator.step = 1
            self.bot.active_addon = _translator
            return await _translator.mainapp(event)

        if self.bot.RE(r'(^–ø–µ—Ä(–µ|–∏)–≤–µ—Ä–Ω–∏|^\?\-)', event, lock=False, del_pat=True):
            self.bot.TXT.gen_txt(event)
            return event.keyboard(str_back)

        if self.bot.RE(r'(^—Ä(–µ|–∏)–≤(–µ|–∏)—Ä—Å|^\?\+)', event, lock=False, del_pat=True):
            return event.answer(event.text[::-1]).keyboard(str_back)

        if self.bot.RE(r'(–ª–∏—Ü–æ|—Ä–æ–∂–∞|—Ñ—ç–π—Å)', event):
            await event.answer('–°–æ–∑–¥–∞—é –ª–∏—Ü–æ, –∂–¥–∏... ‚åõ').send(nonkeyb=True)
            await self.bot.IMG.get_face(event)
            return event.answer('–îe—Ä–∂–∏').keyboard('‚è© –ï—â—ë –ª–∏—Ü–æ%b', str_back)

        if self.bot.RE(r'(–ø—Ä(–µ|–∏)—à–ª–∏|—Å–∫–∏–Ω(—å|)|–æ—Ç–ø—Ä–∞–≤(—å|)|–≥–∏—Ñ–∫–∞|–≥–∏—Ñ|^\?\:)', event, del_pat=True):
            return await self.bot.GIF.seach_gif(event)

        if self.bot.RE(r'(–≥(–æ|–∞)—Ä(–æ|–∞)—Å–∫–æ–ø|^\?\%)', event, lock=False):
            _, k = ('', f'–†–∞—Å—Å—ã–ª–∫–∞ {event.text}:\n\n') if event.time_send else (event.keyboard('–ü–æ–º–æ—â—å%g'), '')
            return event.answer(f"{k}{await self.bot.GOROSCOPE.get(event.text)}")

        if self.bot.RE(r'(–±–ª—è–¥—å|–ø–∏–∑–¥–∞|—É—Ä–æ–¥|–Ω–∞—Ö—É–π|—Ö—É–π|—Å—É–∫–∞|—Ç—É–ø–æ–π|—É—ë–±–æ–∫|–±–ª—è|—Ç—ã.{,8}–ª–æ—Ö|—à–ª—é—Ö–∞)', event):
            self.bot.ban += 1
            return event.answer(
                f"–Ø —Ö–æ—Ç—å –∏ –±–æ—Ç... –Ω–æ –º–Ω–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞... üòü –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è"
                f" —Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–µ–±—è...")

        if self.bot.RE(r'(–ø—Ä(–∏|–µ)–≤(–∏|–µ)—Ç|–ø—Ä–∏–≤|–∑–¥(–∞|–æ)—Ä–æ–≤(–∞|–æ)|–∑–¥—Ä–∞—Å—Ç(–∏|–µ)|–∑–¥—Ä–∞(–≤—Å|c)—Ç–≤—É–π—Ç(–∏|–µ)|—Å–∞–ª(–∞|–æ)–º)', event):
            return self.bot.hello(event)

        if self.bot.RE(r'(—Ç—É–ø–æ–π|—Ç—É–ø–∏—Ü–∞|–∏–¥(–∏|–µ)–æ—Ç|–ª–æ—Ö|–ø–∏–¥(–æ|–∞)—Ä|–±—ã–∫—É–µ—à|(–æ|–∞)—Ö—É–µ–ª|–ª(–æ|–∞)—à–∞—Ä–∞)', event):
            return event.answer(f"{event.gender('–°–∞–º', '–°–∞–º–∞')} —Ç—ã ‚û° {event.text} "
                                f"{rnd.choice(['üò°', 'üò†', 'üòë'])}")

        if self.bot.RE(r'(^!—Å—Ç–∞—Ä—Ç$|^!–∂–¥–∞—Ç—å$|^!–ø—Ä–∞–≤–∏–ª–∞$)', event):
            _chat = self.bot.CHAT
            _chat.step = 1
            self.bot.active_addon = _chat
            return await _chat.mainapp(event)

        if self.bot.RE(r'!–±–æ—Ç', event) and not event.from_comment:
            return event.answer('–ö–æ–º–∞–Ω–¥—É "!–±–æ—Ç" –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≥—Ä—É–ø–ø—ã, –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '
                                '–Ω–∞–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É - "–≥–∏—Ñ–∫–∞ –∫–æ—Ç" –∏–ª–∏ "–∞—Ä—Ç –∫–æ—Ç" –∏–ª–∏ "–æ–∑–≤—É—á—å –ø—Ä–∏–≤–µ—Ç" –∏ —Ç–¥... –°–º–æ—Ç—Ä–∏'
                                ' –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–¥–µ—Å—å https://vk.com/@kreo_0-komandy-bota')

        if self.bot.RE(r"^–∫–∞–ª$", event):
            return event.answer('k').keyboard('–∫–∞–ª1')

        if self.bot.RE(r"–∫–∞–ª1", event):
            if event.support_callback:
                from asyncio import sleep
                for i in range(5):
                    await sleep(2)
                    print(event.from_callback_button)
                    await event.answer(f'{i}').send()
                    print(event.from_callback_button)

                return event.answer(f'test ok').keyboard('–∫–∞–ª%g')

            else:
                return event.answer(f'test not').keyboard('–∫–∞–ª%g')

        if self.bot.RE(r'^test$', event):
            print("___test_start___")
            task = []
            for i in range(5000):
                task.append(create_task(event.social.get_user_all_info(rnd.randint(10000, 50000000), True)))

            s = []
            for i in await gather(*task):
                s.append(i[0]["first_name"][0])

            return event.answer("".join(s))

        if self.bot.RE(r'^_test$', event):
            print("___test_start___")
            for i in range(5000):
                params = {'user_ids': rnd.randint(10000, 50000000),
                          'fields': ('sex,photo_200_orig,bdate,city,country,home_town,'
                                     'last_seen,online,photo_max_orig,screen_name')
                          }
                event.social.add_task('users.get', params, 0)

            return event.answer('__end__')

        return False

    async def content(self, event: Event):
        # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
        if event.attachments_type == 'audio_message':
            return event.answer(f'–ù–µ–ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã -> {event.audio_msg}').keyboard('!–í—Å—ë –º–µ–Ω—é%g')

        if event.attachments_type in ('photo', 'audio', 'video'):
            await self.bot.IMG.get_art(event=event)
            return event.keyboard('‚è© –ï—â—ë –∞—Ä—Ç%b', str_back)

        if event.attachments_type in ('doc', 'sticker'):
            event.text = rnd.choice(['cat', 'dog', 'raccoon', 'girl', 'boobs', 'cosmos', 'fail'])
            return await self.bot.GIF.seach_gif(event)

        if event.attachments_type == 'wall':
            return event.attachment(self.bot.GIF.get_gif())

        else:
            return event.answer('–î–∞–∂–µ –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ...').keyboard('!–í—Å—ë –º–µ–Ω—é%g')

    def already_check_post(self, event: Event, name):
        if Global.check_content.get(name, -1) == 1:
            return event.answer("–ö–∞–∫–æ–π —Ç–æ –Ω–∏–≥–æ–¥—è–π —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—Å—Ç(((")
        if Global.check_content.get(name, -1) == 0:
            return event.answer("–ö–∞–∫–æ–π —Ç–æ –Ω–∏–≥–æ–¥—è–π —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ—Å—Ç(((")

        return False

    async def get_ans(self, event: Event) -> str:
        info = await event.get_user_info(event.user_id)
        s = rnd.choice(_jackie_rep + _api_ans if info.gender == 1 else _api_ans)
        return s.replace("%name%", info.fname.capitalize())

    async def api(self, event: Event):
        if self.bot.RE(r'%%check content%%', event):
            txt = re.sub("%%check content%%", '', event.text)
            try:
                name = re.findall(r'%%.*?%%', txt)[0][2:-2]
                txt = re.sub("%%.*?%%", '', txt)
                return event.answer(txt).keyboard(f'!–îA {name}%g', f'!–ùE–¢ {name}%r', tablet=1)
            except IndexError:
                return event.answer('–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä —Å –ø–∏–∫–∞–±—É –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å,'
                                    ' –∞ —è –≥–æ–≤–æ—Ä–∏–ª –µ–º—É —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –±—É—Ö–∞—Ç—å —Å–∞–º–æ–≥–æ–Ω, —ç—Ö –í–∞—Å—è...')

        if self.bot.RE(r'^!–¥a .*_*\d+', event):
            name = event.text.split()[-1]

            s = self.already_check_post(event, name)
            if s:
                return s

            Global.check_content[name] = 1

            return event.answer(await self.get_ans(event))

        if self.bot.RE(r'^!–Ωe—Ç .*_*\d+', event):
            name = event.text.split()[-1]

            s = self.already_check_post(event, name)
            if s:
                return s

            Global.check_content[name] = 0
            return event.answer(await self.get_ans(event))

        return False

    async def end(self, event: Event):
        if not event.from_chat:
            if event.check('0') and self.bot.help(event, '!–ø–æ–º–æ—â—å'):
                return event

            if event.from_comment and not event.text:
                return event.answer(f'–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞...\n–í–æ—Ç '
                                    f'—á—Ç–æ —è —É–º–µ—é –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö:\n\n{IT._all_command_in_comment}')

            if event.from_comment:
                return event.answer(f'–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã...\n'
                                    f'–ù–æ –∑–Ω–∞—é —Ç–∞–∫–∏–µ:\n\n{IT._all_command_in_comment}')

            if event.attachments:
                return await self.content(event)

            if event.text:
                if event.text and event.text[0] in EMOJI_UNICODE:
                    x = " + ".join([rnd.choice(EMOJI_UNICODE) for _ in range(rnd.randint(1, 8))])
                    x = re.sub(r'\u200d', '', x)
                    return event.answer(f'{event.text} = {x} ?')

            if event.text in ('?', '.') and not self.bot.active_addon:
                return self.bot.help(event, now=True)

            if len(event) <= 2:
                return event.answer(f'–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞–π üò¢\n',
                                    f'–ß—Ç–æ "{event.text}"? üòï\n',
                                    f'–ò –∫–∞–∫ —ç—Ç–æ "{event.text}" –ø–æ–Ω—è—Ç—å?',
                                    f'–•–º–º... –ß—Ç–æ–±—ã —ç—Ç–æ "{event.text}" –∑–Ω–∞—á–∏–ª–æ üòü'
                                    ).keyboard(*IT._helpkeyboard, tablet=1)

            #if len(event) > 20:
            #    return event.answer(await self.bot.ADDTXT.get_txt(event))

            if event.text and event.text[0] != "!":
                event.text = f'!{event.text}'
                return await self.bot.event_route(event)

            await self.bot.GIF.seach_gif(event)
            event.keyboard('‚öô !–ü–æ–¥—Ä–æ–±–Ω–µ–µ%g', '‚öô !–ú–µ–Ω—é%g')
            return event.answer(f'–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ç—ã...\n–ü–∏—à–∏ "!–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É "‚öô !–ü–æ–¥—Ä–æ–±–Ω–µ–µ" '
                                f'—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –∞ –ø–æ–∫–∞ –¥–µ—Ä–∂–∏ —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É:')
