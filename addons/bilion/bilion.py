# -*- coding: utf-8 -*-
import random
from untils import req, until, Event
from Sqlbd import Sqlbd
from Addon import Addon, addon_init
from Template import str_error, str_maybe_later, str_menu_out, str_back, str_no, str_yes
import ujson as json
import pickle
from operator import itemgetter

its = until.int_to_smail

with open('addons/bilion/dump_qest', 'rb') as wr:
    baza = pickle.load(wr, encoding="bytes")

_levelkeyb = ['–î–µ—Ç—ë =)%b', '–°—Ç–∞–Ω–¥–∞—Ä—Ç%b', '–ü–æ–¥–æ–±–Ω—ã–π –±–æ–≥—É%b', str_back]
keyb = ['üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å%b', str_back]
keyb2 = [str_yes, str_no, str_back]

_H = 3  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
_L = 3  # –∂–∏–∑–Ω–∏


level_str = '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n1. –î–µ—Ç—ë =)\n2. –°—Ç–∞–Ω–¥–∞—Ä—Ç\n3. –ü–æ–¥–æ–±–Ω—ã–π –±–æ–≥—É'

_msg1 = '–ü–æ–∏–≥—Ä–∞–ª–∏ –∏ —Ö–≤–∞—Ç–∏—Ç, –≤—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)\n–¢—ã –Ω–∞–±—Ä–∞–ª{} {} –æ—á–∫–æ–≤{}'
_msg2 = '‚ûñ{} –æ—á–∫–æ\n{}'
_msg3 = '–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –æ–¥–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ üòù'
_msg4 = '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å =('
_msg5 = '{}, —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ "–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º"?\n–î–ê –∏–ª–∏ –ù–ï–¢'
_msg6 = '{}, —Ç—ã –≤—ã–±—Ä–∞–ª{} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {}\n\n–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{}'
_msg7 = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ù–∞—á–∏—Å–ª–µ–Ω–æ ‚ûï{} –æ—á–∫–∞{}\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{}'
_msg8 = '{}–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å\n–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - {}, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòä\n–¢—ã –Ω–∞–±—Ä–∞–ª{} {} –æ—á–∫–æ–≤ –∏ {}\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? –î–∞ –∏–ª–∏ –ù–ï–¢'
_msg9 = '{}{}{}–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - {}{}\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{}'


_BD = Sqlbd('bilion')
_BD_USERDATA = Sqlbd('userdata')


@addon_init(['!–º–∏–ª–ª–∏–æ–Ω–µ—Ä'], 'üïπ', False, 1)
class Bilion(Addon):
    __slots__ = ('level', 'answer', '_QEST_POINT', '_WRONG_ANSWER', 'username',
                 'user_id', '_step', 'helper', 'help_point', 'help_lock')

    def __init__(self, username, user_id):
        super(Bilion, self).__init__(username, user_id)
        self.level = '1'
        self.answer = ''
        self._QEST_POINT = 0
        self._WRONG_ANSWER = 0
        self._step = 0
        self.helper = []
        self.help_point = 0
        self.help_lock = 0

    def upd(self):
        self.end()
        self.level = '1'
        self.answer = ''
        self._QEST_POINT = 0
        self._WRONG_ANSWER = 0
        self._step = 0
        self.help_point = 0

    def score(self):
        s = '\n–í–∞—à —Å—á—ë—Ç: ' + its(self._QEST_POINT)
        l = '\n–ñ–∏–∑–Ω–µ–π: ' + its(_L - self._WRONG_ANSWER)
        h = f'\n–ü–æ–¥—Å–∫–∞–∑–æ–∫ 50/50: ' + its(_H - self.help_point)
        return s + l + h + '\n'

    def help(self, event):
        ind = 0
        temp = []

        print(self.helper)

        for i in self.helper:
            ind += 1
            temp.append([i, str(ind)])
        while True:
            a = temp[random.randint(0, len(self.helper) - 1)]
            if a[0].lower() != self.answer[0]:
                break

        if int(a[1]) < int(self.answer[1]):
            event.keyboard(a[1] + '%b', self.answer[1] + '%b', *keyb)
            return ('–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n' + a[1] + '. ' + a[0] + '\n'
                    + self.answer[1] + '. ' + self.answer[0].capitalize())
        else:
            event.keyboard(self.answer[1] + '%b', a[1] + '%b', *keyb)
            return ('–ü–æ–¥—Å–∫–∞–∑–∫–∞:\n' + self.answer[1] + '. '
                    + self.answer[0].capitalize() + '\n' + a[1] + '. ' + a[0])

    def get_top(self, p):
        tempdict = {}
        for i in _BD.get_all(key='lvl', val=self.level, sync=True):
            if tempdict.get(i[0], 0) <= i[1]:
                tempdict[i[0]] = i[2]

        b = sorted(tempdict.items(), key=itemgetter(1), reverse=True)[0]
        tempdict[self.user_id] = p
        point = sorted(tempdict.items(), key=itemgetter(1), reverse=True)

        ind = 0
        for i in point:
            ind += 1
            if i[0] == self.user_id:
                break

        if b[0] == self.user_id:
            t = f'–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ {its(b[1])}!'
        else:
            s = _BD_USERDATA.get(b[0], item='fname', sync=True)
            if s:
                s = s[0][0]
            else:
                s = '–ê–¥–º–∏–Ω'
            t = f'–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É - {s} {its(b[1])}'

        l = {4: '–î–µ—Ç—ë', 1: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', 5: '–ü–æ–¥–æ–±–Ω—ã–π –±–æ–≥—É'}

        return (f'–∑–∞–Ω–∏–º–∞–µ—à—å {its(ind)} –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ {its(len(point))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã '
                f'–Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {l.get(int(self.level),"–û—à–∏–±–∫–∞")}, {t}')

    def answerkeyb(self, count, event):
        """–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤
        –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        a = [(str(i) + '%b') for i in range(1, count + 1)]
        event.keyboard(*a, 'üîÑ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å%b', '‚úÇ 50/50%b', str_back)

    async def get_qetion(self, event):
        if int(self.level) < 5:
            url = 'https://engine.lifeis.porn/api/millionaire.php'
            val = {'q': self.level}
            print('get qetion')
            response = await req.get(url, params=val)
            response = json.loads(response.decode('utf-8'))['data']

            question = response['question'].replace('\u2063', '')
            answers = random.sample(response['answers'], 4)
            answer = response['answers'][response['id']]

            answ = ''
            ind = 1
            id_answer = 0
            self.answerkeyb(len(answers), event)
            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            self.helper = answers
            for i in answers:
                if i == answer:
                    id_answer = ind
                answ += '\n' + str(ind) + '. ' + i
                ind += 1
            print('get qetion ok')

        else:
            q = baza[random.randint(0, len(baza)-1)]
            question = q[0]
            answers = random.sample(q[1] + [q[2]], len(q[1]) + 1)

            answer = q[2]
            answ = ''
            ind = 1
            id_answer = 0
            self.answerkeyb(len(answers), event)  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            self.helper = answers
            for i in answers:
                if i == answer:
                    id_answer = ind
                answ += '\n' + str(ind) + '. ' + i
                ind += 1

        self.answer = [answer.lower(), str(id_answer)]

        data = question + '\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:' + answ
        self._step += 1
        return data

    async def mainapp(self, event: Event) -> Event:
        hide = event.check('–ü–†–û–ü–£–°–¢–ò–¢–¨')

        if event.stoper():
            point = self._QEST_POINT
            await _BD.put(self.user_id, self._step, point, self.level)
            self.upd()
            if point:
                if self.isstep(1000):
                    end = ''
                else:
                    end = f' –∏ {self.get_top(point)}'

                return event.answer(_msg1, event.gender("", "–∞"), its(point), end).keyboard()
            else:
                return event.answer(str_menu_out)

        if event.check('–ü–û–î–°–ö–ê–ó–ö–ê', '50/50') and self.step > 2:
            if self.help_point < _H and self.help_lock == 0:
                self.help_lock = 1
                self.help_point += 1
                if self._QEST_POINT >= 1:
                    self._QEST_POINT -= 1
                    return event.answer(_msg2, its(1), self.help(event))
                else:
                    return event.answer(self.help(event))

            elif self.help_lock == 1:
                return event.answer(_msg3)

            else:
                self.answerkeyb(4, event)
                return event.answer(_msg4)

        if self.isstep(0, 1):
            return event.answer(_msg5, self.username).keyboard(*keyb2)

        if self.isstep(1, 2):
            if event.check('–î–ê'):
                return event.answer(level_str).keyboard(*_levelkeyb)
            else:
                self.upd()
                return event.answer(str_maybe_later).keyboard()

        if self.isstep(2):
            if event.check('–¥–µ—Ç—ë', '–¥–µ—Ç–µ', '1'):
                self.level = '4'

            elif event.check('—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '2'):
                self.level = '1'

            elif event.check('–ø–æ–¥–æ–±–Ω—ã–π –±–æ–≥—É', '3'):
                self.level = '5'

            else:
                return event.answer(str_error).keyboard(*_levelkeyb)

            self.setstep(3)
            # –∫–ª–∞–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –≤ get_qetion()
            return event.answer(_msg6, self.username, event.gender("", "–∞"),
                                event.text, await self.get_qetion(event))

        if self.isstep(3):
            if event.check(*self.answer):
                self.help_lock = 0
                self._QEST_POINT += 3
                # –∫–ª–∞–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –≤ get_qetion()
                return event.answer(_msg7, its(3), self.score(), await self.get_qetion(event))

            else:
                self.help_lock = 0
                if self._WRONG_ANSWER >= _L - 1:
                    self.setstep(1000)
                    # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–¥
                    await _BD.put(self.user_id, self._step, self._QEST_POINT, self.level)
                    head = 'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø'
                    if hide:
                        head = '–ü'

                    return event.answer(_msg8, head, self.answer[0], event.gender("", "–∞"),
                                        its(self._QEST_POINT), self.get_top(self._QEST_POINT)
                                        ).keyboard(*keyb2)

                else:
                    if self._QEST_POINT >= 3:
                        self._QEST_POINT -= 3
                        d = f'‚ûñ{its(3)} –æ—á–∫–∞,'
                    else:
                        d = ''

                    self._WRONG_ANSWER += 1
                    # –∫–ª–∞–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –≤ get_qetion()
                    h = 'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, '
                    if hide:
                        h = ''

                    if not d and not h:
                        z = '–í'
                    else:
                        z = ' –≤'

                    return event.answer(_msg9, h, d, z, self.answer[0],
                                        self.score(), await self.get_qetion(event))

        if self.isstep(1000):
            if event.check('–î–ê'):
                self.upd()
                self.setstep(2)
                return event.answer(level_str).keyboard(*_levelkeyb)  # –≤—ã–±–æ—Ä –∫–ª–∞–≤—ã

            else:
                self.upd()
                return event.answer(str_maybe_later).keyboard()


