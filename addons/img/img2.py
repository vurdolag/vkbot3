# -*- coding: utf-8 -*-
import random as rnd
import config
from untils import req, Event, Global, logs, get_proxy
from Sqlbd import Sqlbd
from Addon import Addon, middelware, addon_init
from Template import str_back, str_error
import asyncio
import ujson as json
import recompile as re
import deviantart
import time
from typing import Optional

keyb = ['‚¨Ö –°–º–µ–Ω–∏—Ç—å%b', str_back]

keyb2 = ['üé® –ê—Ä—Ç —Ñ–æ—Ç–æ%b', '‚óº –ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ%b',
         '‚ùî –ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ%b', '‚ú® –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ%b',
         'üôé –õ–∏—Ü–æ%b', 'üåÑ –°–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç%b', str_back]

_help = (f'üé® 1. –ê—Ä—Ç —Ñ–æ—Ç–æ - —Å–¥–µ–ª–∞—Ç—å –∏–∑ —Ñ–æ—Ç–æ –∞—Ä—Ç\n‚óº 2. –ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ - —Ñ–æ—Ç–æ –≤ —Ü–≤–µ—Ç–Ω–æ–µ'
         f'\n‚ùî 3. –ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ - –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ\n‚ú® 4. –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ç–æ -'
         f' —Å–æ–∑–¥–∞—Å—Ç —Ñ–æ—Ç–æ –ø–æ —Ç–µ–∫—Å—Ç—É.\nüôé 5. –õ–∏—Ü–æ - –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ\n'
         f'üåÑ 6. –°–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç - –ø—Ä–∏—à–ª–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç –∏–ª–∏ —Ñ–æ—Ç–æ')

style = ['https://sun9-63.userapi.com/c854532/v854532039/19f963/GIbZ8bkq8JI.jpg',
         'https://sun9-54.userapi.com/c854532/v854532039/19f96d/hoDI11fi_mw.jpg',
         'https://sun9-63.userapi.com/c854532/v854532039/19f976/WHbJO5nIwkg.jpg',
         'https://sun9-57.userapi.com/c854532/v854532039/19f984/q87MmGhjdE0.jpg',
         'https://sun9-15.userapi.com/c854532/v854532039/19f98d/JGOgbRNbkYQ.jpg',
         'https://sun9-69.userapi.com/c854532/v854532039/19f996/ifywgGFJKpI.jpg',
         'https://sun9-48.userapi.com/c854532/v854532039/19f9a0/kUpiXzXsdUw.jpg',
         'https://sun9-9.userapi.com/c854532/v854532039/19f9aa/1Gc-U7-LeRE.jpg',
         'https://sun9-34.userapi.com/c854532/v854532039/19f9b2/ZGYk_3FiiCM.jpg']


def get_token_deviantart() -> str:
    return deviantart.Api(config.deviantart_id, config.deviantart_secret).access_token


class AuthDeviantart:
    token_deviantart = get_token_deviantart()


devart = AuthDeviantart()

_BD = Sqlbd('cache_art')


@addon_init(["!–§–û–¢–û –ê–†–¢", '!–ê–†–¢'], 'üé®', True, 2)
class Img(Addon):
    __slots__ = ('old_photo', 'count', 'offset', 'timer', 'search', 'token')

    def __init__(self, username, user_id):
        super(Img, self).__init__(username, user_id)
        self.lock = 5
        self.old_photo = ''
        self.count = rnd.randint(0, len(style) - 1)
        self.offset = 0
        self.timer = int(time.time())
        self.search = ['', '']
        self.token = devart

    def counter(self) -> int:
        a = self.count
        self.count += 1
        return a % len(style)

    async def nero(self, mode: str, params, event: Event):
        if not event.from_comment:
            await event.answer('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... ‚åõ').send(nonkeyb=True)
            event.set_typing()

        url = f"https://api.deepai.org/api/{mode}"
        headers = {'api-key': config.deepai}
        try:
            response = await req.post(url, data=params, headers=headers, timeout=300)
            response = json.loads(response.decode('utf-8'))
            try:
                return await event.uploads(response['output_url'])
            except:
                try:
                    return response['output']
                except:
                    return ''

        except:
            logs()
            return ''

    async def get_face(self, event: Event) -> Event:
        event.is_can_edit_prev_msg = False
        event.set_typing()
        url = "https://thispersondoesnotexist.com/image"
        headers = {'User-Agent': 'My User Agent 1.0'}
        try:
            response = await req.get(url, headers=headers, proxy=get_proxy())
            return await event.uploads(response)

        except:
            logs()
            return event.answer(str_error)

    async def cache_art(self, event: Event, id_art, link, short_link, caption=''):
        await asyncio.sleep(2 + rnd.random() * 3)
        if not event.from_comment:
            event.from_comment = True
            await event.uploads(link, caption=caption)
        atta = event.attachments_out
        if atta:
            await _BD.put(id_art, atta[0], short_link)
            await asyncio.sleep(rnd.random() * 30 + 30)
            owner_id = rnd.choice(config.group_for_post)
            Global.start_task(event.social.create_post(owner_id, event.text, atta))
        return True

    async def get_art(self, q='', event: Event = None):
        event.is_can_edit_prev_msg = False
        event.set_typing()
        for _ in range(5):
            if int(time.time()) - self.timer > 3600 * 24:
                self.offset = 0
                self.search[1] = ''
                self.timer = int(time.time())

            if q and q != self.search[0]:
                self.search[0] = q
                self.search[1] = await event.translate(q, 'ru-en')
                self.offset = 0

            cont = []
            params = {'limit': 5,
                      'offset': self.offset,
                      'q': self.search[1],
                      'timerange': '1month',
                      'access_token': self.token.token_deviantart}

            url = 'https://www.deviantart.com/api/v1/oauth2/browse/popular'
            try:
                res = await req.get(url, params=params)
                response = json.loads(res).get('results')

                if response:
                    for i in response:
                        try:
                            cont.append([i['preview']['src'], i['content']['src'],
                                         i['content']['width'], i['content']['height']])
                        except KeyError:
                            pass

                self.offset += 5
                if cont:
                    out = rnd.choice(cont)
                    id_art = out[0].split('?')[0].split('/f/')[-1].split('/v1/fill')[0]
                    id_art = ('telegram' if event.from_telegram else '') + re.img1.sub('', id_art)
                    ans = await _BD.get_all(key='id_art', val=id_art)
                    if ans:
                        ans = ans[0]
                        return event.answer(ans[2]).attachment(ans[1])

                    else:
                        short_link = await event.get_short_link(out[1])
                        short_link = f'C—Å—ã–ª—å –Ω–∞ –æ—Ä–∏–≥ - {short_link} {out[2]}X{out[3]} pix'
                        await event.answer(short_link if not event.from_telegram else '').uploads(out[0])
                        if not event.from_telegram:
                            Global.start_task(self.cache_art(event, id_art, out[0], short_link,
                                                             caption=self.search[0]))
                        return event

                else:
                    img = await event.search_img(self.search[1])
                    if img:
                        return event.attachment(rnd.choice(img))

                return event.answer('–ù–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å.')
            except KeyError:
                pass
            except:
                logs()
                self.token.token_deviantart = get_token_deviantart()

        return event.answer(str_error)

    def end(self, event: Optional[Event] = None):
        self.step = 0
        self.old_photo = ''

    def choose_module(self, event: Event):
        if event.check('1', '–ê–†–¢ –§–û–¢–û'):
            self.setstep(2)
            return event.answer('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–∫—É –∏ —è –Ω–∞–ª–æ–∂—É —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç üñº'
                                '\n\n‚ô® –°–≤–æ–π —Ñ–∏–ª—å—Ç—Ä\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.'
                                ).keyboard('‚ô® –°–≤–æ–π —Ñ–∏–ª—å—Ç—Ä%b', *keyb)

        elif event.check('2', '–ß–ï–†–ù–û-–ë–ï–õ–û–ï', '–ß–ï–†–ù–û–ë–ï–õ–û–ï'):
            self.setstep(3)
            return event.answer('–ü—Ä–∏—à–ª–∏ —á–µ—Ä–Ω–æ-–±–µ–ª—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —è —Å–¥–µ–ª–∞—é –µ—ë —Ü–≤–µ—Ç–Ω–æ–π'
                                '\n\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')

        elif event.check('3', '–ß–¢–û –ù–ê –§–û–¢–û'):
            self.setstep(4)
            return event.answer('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —è —Å–∫–∞–∂—É —á—Ç–æ –Ω–∞ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ ‚ò∫'
                                '\n\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')

        elif event.check('4', '–¢–ï–ö–°–¢ –í –§–û–¢–û'):
            self.setstep(5)
            return event.answer('–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é '
                                '–ø–æ –Ω–µ–º—É —Ñ–æ—Ç–æ (–Ω–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –æ—á–µ–Ω—å –∫—Ä–∏–ø–æ–≤–æ)'
                                '\n\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')

        elif event.check('5', '–õ–ò–¶–û'):
            self.setstep(6)

        elif event.check('6', '–°–õ–£–ß–ê–ô–ù–´–ô –ê–†–¢'):
            self.setstep(7)

        elif self.isstep(1):
            return event.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–æ–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏')

        return None

    @middelware
    async def mainapp(self, event: Event) -> Event:
        rnd.shuffle(style)

        if event.check('–°–ë–†–û–°–ò–¢–¨ –ü–û–ò–°–ö'):
            self.search = ['', '']
            return event.answer('–ü–æ–∏—Å–∫ –∞—Ä—Ç —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω.\n\n'
                                '–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É - ‚è© –ï—â—ë –∞—Ä—Ç').keyboard('‚è© –ï—â—ë –∞—Ä—Ç%b', *keyb)

        if event.check('–°–í–û–ô –§–ò–õ–¨–¢–†') and self.isstep(2):
            return event.answer('–ü—Ä–∏—à–ª–∏ 2 —Ñ–æ—Ç–∫–∏, –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç, –≤—Ç–æ—Ä–∞—è '
                                '—Ñ–æ—Ç–∫–∞—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∞ –∏–ª–∏ –∞—Ä—Ç.'
                                '\n\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.'
                                ).keyboard(*keyb)

        if event.check('!–°–ú–ï–ù–ò–¢–¨', '–°–ú–ï–ù–ò–¢–¨') and self.step >= 1:
            self.setstep(1)
            self.old_photo = ''
            return event.answer(_help).keyboard(*keyb2)

        if self.isstep(0, 1):
            return event.answer(f'–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ?\n\n{_help}').keyboard(*keyb2)

        event.keyboard(*keyb)

        if self.step > 0 and self.choose_module(event):  # –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è
            return event

        if event.attachments:
            url_photo = await event.get_photo()
            self.old_photo = url_photo
        else:
            url_photo = self.old_photo

        if self.isstep(2):
            if len(url_photo) == 2:
                params = {'content': url_photo[0],
                          'style': url_photo[1]}
                await self.nero('CNNMRF', params, event)
                if event.attachments_out:
                    return event.answer('–ü—Ä–∏—à–ª–∏ –µ—â—ë —Ñ–æ—Ç–∫–∏.\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')
                else:
                    return event.answer(str_error)

            elif len(url_photo) == 1:
                params = {'content': url_photo[0],
                          'style': style[self.counter()]}
                await self.nero('CNNMRF', params, event)
                if event.attachments_out:
                    return event.answer('–ü—Ä–∏—à–ª–∏ –µ—â—ë —Ñ–æ—Ç–∫—É'
                                        '\nüîÑ –î—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä'
                                        '\n‚ô® –°–≤–æ–π —Ñ–∏–ª—å—Ç—Ä'
                                        '\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.'
                                        ).keyboard('üîÑ –î—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä%b', '‚ô® –°–≤–æ–π —Ñ–∏–ª—å—Ç—Ä%b', *keyb)
                else:
                    return event.answer(str_error)
            else:
                return event.answer('–ù—É–∂–Ω–æ 1 –∏–ª–∏ 2 —Ñ–æ—Ç–æ –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–≤–æ–π —Ñ–∏–ª—å—Ç—Ä')

        if self.isstep(3):
            if len(url_photo) == 1:
                params = {'image': url_photo[0]}
                await self.nero('colorizer', params, event)

                if event.attachments_out:
                    return event.answer('\n–ü—Ä–∏—à–ª–∏ –µ—â—ë —Ñ–æ—Ç–∫—É.\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')
                else:
                    return event.answer(str_error)
            else:
                return event.answer('–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ')

        if self.isstep(4):
            if url_photo:
                params = {'image': url_photo[0]}

                res = await self.nero('neuraltalk', params, event)
                if res:
                    return event.answer('–î–µ—Ä–∂–∏:\n\n' + await event.translate(res, 'ru-en'))
                else:
                    return event.answer(str_error)
            else:
                return event.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–∫–∞')

        if self.isstep(5):
            params = {'text': await event.translate(event.text, 'ru-en')}
            await self.nero('text2img', params, event)

            if event.attachments_out:
                return event.answer('\n–ù–∞–ø–∏—à–∏ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.')
            else:
                return event.answer(str_error)

        if self.isstep(6):
            event.is_can_edit_prev_msg = False
            await event.answer('–°–æ–∑–¥–∞—é –ª–∏—Ü–æ, –∂–¥–∏... ‚åõ').send(nonkeyb=True)
            await self.get_face(event)
            event.is_can_edit_prev_msg = True
            if event.attachments_out:
                return event.answer('–î–µ—Ä–∂–∏.'
                                    '\n‚è© –ï—â—ë –ª–∏—Ü–æ - –Ω–æ–≤–æ–µ –ª–∏—Ü–æ.'
                                    '\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.'
                                    ).keyboard('‚è© –ï—â—ë –ª–∏—Ü–æ%b', *keyb)
            else:
                return event.answer(str_error)

        if self.isstep(7):
            txt = re.space.sub(' ', re.img2.sub('', event.text.lower())).strip()

            await self.get_art(txt, event)
            if event.attachments_out:
                h = keyb
                d = ''
                a = '\n‚è© –ï—â—ë –∞—Ä—Ç - –Ω–æ–≤—ã–π –∞—Ä—Ç.'

                if self.search[1]:
                    h = keyb + ['–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫%b']
                    d = '\nüîÄ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫'
                    a = f'\n‚è© –ï—â—ë –∞—Ä—Ç - "{self.search[0]}"'

                return event.answer_add('\n–ù–∞–ø–∏—à–∏ —á—Ç–æ –∏—â–µ—à—å.'
                                        f'{a}'
                                        f'\n‚¨Ö –°–º–µ–Ω–∏—Ç—å - –¥—Ä—É–≥–∞—è —Ñ—É–Ω–∫—Ü–∏—è.{d}'
                                        ).keyboard('‚è© –ï—â—ë –∞—Ä—Ç%b', *h)
            else:
                return event

        self.setstep(1)
        return event.answer(f'–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ?\n\n{_help}').keyboard(*keyb2)
