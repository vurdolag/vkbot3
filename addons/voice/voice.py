# -*- coding: utf-8 -*-
from fake_useragent import UserAgent
from Addon import Addon, middelware, addon_init
from Template import str_back, str_yes, str_error

from untils import req, Event, logs, get_proxy

import random as rnd
import recompile as rec
import config
from aiohttp import ClientSession

speak = {1: 'ermilov',
         2: 'levitan',
         3: 'zahar',
         4: 'silaerkan',
         5: 'oksana',
         6: 'kolya',
         7: 'kostya',
         8: 'nastya',
         9: 'sasha',
         10: 'nick'}


keyb = [
    #'üó£ –ì–æ–ª–æ—Å%b',
    #'üí• –≠–º–æ—Ü–∏–∏%b',
    str_back]
keyb2 = [str_yes, '–ï—â—ë –ø—Ä–∏–º–µ—Ä%b', str_back]
keybemo = ['üòâ –û–±—ã—á–Ω—ã–π%b', 'üòÉ –î–æ–±—Ä—ã–π%g', 'üò° –ó–ª–æ–π%r', str_back]

tmp = ''
for i in speak:
    tmp += '\n' + str(i) + '. ' + speak[i]


NotWork = 0
Start = 1
Emotion = 20
EmotionEdit = 21
VoiceChange = 10


@addon_init(['!–û–ó–í–£–ß–¨ –¢–ï–ö–°–¢', '!–û–ó–í–£–ß–¨', '!–û–ó–í–£–ß', '!–û–ó–í'], 'üì¢', True, 2)
class Voice(Addon):
    __slots__ = 'emotion', 'speaker', 'first'

    def __init__(self, username, user_id):
        super(Voice, self).__init__(username, user_id)
        self.lock = 1
        self.emotion = self.set_condition(self.user_id, 'voice_emotion', 'neutral', False)
        self.speaker = self.set_condition(self.user_id, 'voice_speaker', 'random', False)
        self.first = self.set_condition(self.user_id, 'voice_first', 1, False, 0)

    def head(self) -> dict:
        user_ag = UserAgent().chrome
        return {
            'User-Agent': user_ag,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-ru,ru;q=0.8,en-us;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'X-Requested-With': 'XMLHttpRequest',
            'DNT': '1'}

    async def synthesize(self, event: Event, speaker='random', emotion='neutral') -> Event:
        #if speaker == 'random':

        speaker = rnd.choice(('ya-oksana', 'ya-zahar', 'ya-ermil', 'ya-jane', 'ya-omazh'))

        text = rec.voice1.sub('', event.text)

        url = 'https://voxworker.com/ru/ajax/convert'
        '''
        url = 'https://tts.voicetech.yandex.net/generate'
        params = {'key': config.ya_speech,
                  'text': text,
                  'format': 'mp3',
                  'lang': 'ru-RU',
                  'speed': '1',
                  'emotion': emotion,
                  'speaker': speaker,
                  'robot': '1'}
        '''

        params = {
            'voice': speaker,
            'speed': '1.0',
            'pitch': 1,
            'text': text
                }

        if not text:
            return event.answer('–Ø –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è '
                                '(—Å —á–µ—Ç–∫–∏–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Å–ª–æ–≤)')

        try:
            proxy = get_proxy()
            headers = self.head()

            async with ClientSession() as session:
                async with await session.post(url, data=params, proxy=proxy, headers=headers) as res:
                    response = await res.json()

                assert response['status']

                async with await session.get(response['voice'], proxy=proxy, headers=headers) as res:
                    audio_bytes = await res.read()

        except:
            logs()
            return event.answer(str_error)

        try:
            _atta = await event.uploads(audio_bytes, type='doc', ret=True, telegram='audio')
            atta = _atta[0]

        except:
            logs()
            return event.answer(str_error)

        short_url = await event.get_short_link(atta[1])

        return event.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ - {short_url}' if not event.from_telegram else '').attachment(atta[0])

    async def get_quote(self) -> str:
        url = f'https://finewords.ru/sluchajnaya?_=1579426725762'
        try:
            for _ in range(3):
                _response = await req.get(url, timeout=5)
                response = rec.voice2.sub('', _response.decode())
                if 'HTML' in response:
                    continue
                return response
            return str_error

        except:
            logs()
            return str_error

    @middelware
    async def mainapp(self, event: Event) -> Event:
        event.is_can_edit_prev_msg = False

        #if event.check('üó£ –°–ú–ï–ù–ò–¢–¨ –ì–û–õ–û–°', '–ì–û–õ–û–°', '!–°–ú–ï–ù–ò–¢–¨ –ì–û–õ–û–°', '!–ì–û–õ–û–°') and self.step >= 1:
        #    self.setstep(VoiceChange)
        #    return event.answer('–ö–∞–∫–æ–π –≥–æ–ª–æ—Å –≤—ã–±–µ—Ä–µ—à—å? –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä.\n' + tmp).keyboard(*keyb)

        #if event.check('üí• –°–ú–ï–ù–ò–¢–¨ –≠–ú–û–¶–ò–Æ', '–≠–ú–û–¶–ò', '!–°–ú–ï–ù–ò–¢–¨ –≠–ú–û–¶–ò–Æ', '!–≠–ú–û–¶–ò–ò') and self.step >= 1:
        #    self.setstep(Emotion)
        #    return event.answer('–ö–∞–∫—É—é —ç–º–æ—Ü–∏—é –≤—ã–±–µ—Ä–µ—à—å?\n1. –û–±—ã—á–Ω—ã–π\n2. –î–æ–±—Ä—ã–π\n3. –ó–ª–æ–π').keyboard(*keybemo)

        if self.isstep(Emotion):
            if event.check('1', '–û–ë–´–ß–ù–´–ô'):
                self.emotion = 'neutral'

            elif event.check('2', '–î–û–ë–†–´–ô'):
                self.emotion = 'good'

            elif event.check('3', '–ó–õ–û–ô'):
                self.emotion = 'evil'

            else:
                return event.answer('–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑\n1. –û–±—ã—á–Ω—ã–π\n2. –î–æ–±—Ä—ã–π\n3. –ó–ª–æ–π').keyboard(*keybemo)
            self.setstep(EmotionEdit)

            event.keyboard(*keyb2)

            event.text = '–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è —Ç–∞–∫–æ–µ, –∑–≤—É—á–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏? –ñ–º–∏ –¥–∞ –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!'

            await self.synthesize(event, self.speaker, self.emotion)

            return event.answer('–≠–º–æ—Ü–∏—è –≥–æ–ª–æ—Å–∞ –ø–æ–¥–æ—à–ª–∞?\n–î–∞ –∏–ª–∏ –ù–µ—Ç?')

        if self.isstep(VoiceChange):
            if event.check('–î–ê', '‚úÖ –î–ê'):
                self.setstep(Start)
                self.set_condition(self.user_id, 'voice_speaker', self.speaker)
                return event.answer('–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—É —Ç–≤–æ—ë —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.').keyboard(*keyb)

            if event.check('–ï–©–Å –ü–†–ò–ú–ï–†'):
                pass
            else:
                try:
                    self.speaker = speak[int(event.text)]
                except:
                    return event.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ').keyboard(*keyb)

            event.keyboard(*keyb2)

            event.text = await self.get_quote()
            # event.text = '–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –∫–∞–∫ –∑–≤—É—á–∏—Ç —ç—Ç–æ—Ç –ì–æ–ª–æ—Å?'

            await self.synthesize(event, self.speaker, self.emotion)

            return event.answer('–ì–æ–ª–æ—Å –ø–æ–¥–æ—à–µ–ª?\n‚úÖ –î–∞? –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ –≥–æ–ª–æ—Å–∞.')

        if self.isstep(EmotionEdit):
            if event.check('–î–ê'):
                self.setstep(Start)
                self.set_condition(self.user_id, 'voice_emotion', self.emotion)
                return event.answer('–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—É —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üòå').keyboard(*keyb)
            else:
                self.setstep(Emotion)
                return event.answer('–ö–∞–∫—É—é —ç–º–æ—Ü–∏—é –≤—ã–±–µ—Ä–µ—à—å?\n1. –û–±—ã—á–Ω—ã–π\n2. –î–æ–±—Ä—ã–π\n3. –ó–ª–æ–π').keyboard(*keybemo)

        if self.isstep(NotWork, Start):
            if self.first == 0:
                self.first = 1
                return event.answer(f'–ú–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n'
                                    #f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –∏ —ç–º–æ—Ü–∏—é, –∫–æ–º–∞–Ω–¥—ã:\n!–ì–æ–ª–æ—Å\n'
                                    #'!–≠–º–æ—Ü–∏–∏\n\n–ñ–¥—É —Ç–≤–æ—ë —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úç'
                                    ).keyboard(*keyb)
            else:
                return event.answer(
                    #'–ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å !–ì–æ–ª–æ—Å !–≠–º–æ—Ü–∏–∏\n\n'
                    '–ñ–¥—É —Ç–≤–æ—ë —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úç'
                                    ).keyboard(*keyb)

        if self.isstep(Start):
            if len(event) > 1500:
                return event.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòû\n–¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '
                                    '–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ ‚òù').keyboard(*keyb)

            if len(event) == 0:
                return event.answer(f'–£–ø—Å üòû –∫–∞–∂–µ—Ç—Å—è —Ç—ã {event.gender("–ø—Ä–∏—Å–ª–∞–ª", "–ø—Ä–∏—Å–ª–∞–ª–∞")} –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,'
                                    f'–ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —á–µ—Ç–∫–∏–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Å–ª–æ–≤)').keyboard(*keyb)

            event.keyboards = ''
            if not event.from_comment:
                await event.answer('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... ‚åõ').send(nonkeyb=True)

            await self.synthesize(event, self.speaker, self.emotion)

            return event.keyboard(*keyb)
