# -*- coding: utf-8 -*-
import random as rnd
import recompile as re
from untils import until, Event
from Sqlbd import Sqlbd
from Addon import Addon, addon_init
from Template import str_back, str_yes, str_no, str_menu_out
from operator import itemgetter
import asyncio
import sqlite3

its = until.int_to_smail

_p2 = 'üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å%b'

keyb = ['‚ùì –ü–æ–¥—Å–∫–∞–∑–∫–∞%b', _p2, str_back]
keyb2 = [_p2, str_back]
keyb3 = [str_yes, str_no, '‚ùï –ò–ù–§–û%b', '‚úä –°–ª–æ–∂–Ω–æ—Å—Ç—å%b', str_back]
keyb4 = [str_back]
keyb5 = ['üòÄ –õ–µ–≥–∫–æ%g', 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ%b', 'üò° –°–ª–æ–∂–Ω–æ%r']

qlevl = {'–õ–ï–ì–ö–û': [60, 10, 10, 1, 0], '–ù–û–†–ú–ê–õ–¨–ù–û': [30, 5, 5, 2, 1], '–°–õ–û–ñ–ù–û': [15, 3, 3, 3, 2]}
word_point = {1: '–æ—á–∫–æ', 2: '–æ—á–∫–∞', 3: '–æ—á–∫–∞'}
qest_tasks = []


_msg1 = ('–í—Ä–µ–º—è –≤—ã—à–ª–æ, –ø–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòä –¢—ã —Å–º–æ–≥{} –Ω–∞–±—Ä–∞—Ç—å {} –æ—á–∫–æ–≤ –∏ {}\n\n'
         '–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë?\n‚úÖ –î–ê –∏–ª–∏ ‚ùå –ù–ï–¢')
_msg2 = '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, {}–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - {}{}\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{}{}'
_msg3 = '–ü–æ–∏–≥—Ä–∞–ª–∏ –∏ —Ö–≤–∞—Ç–∏—Ç –≤—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)\n\n–¢—ã –Ω–∞–±—Ä–∞–ª{} {} –æ—á–∫–æ–≤ –∏ {}'
_msg4 = ('{}, —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?\n\n‚úÖ –î–ê –∏–ª–∏ ‚ùå –ù–ï–¢\n\n'
         '‚ùï –ò–ù–§–û - –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã\n\n‚úä –°–ª–æ–∂–Ω–æ—Å—Ç—å - –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã')
_msg5 = '–û—Ç–ª–∏—á–Ω–æ! –¥–µ—Ä–∂–∏ –≤–æ–ø—Ä–æ—Å:\n{}{}'
_msg6 = '–ù—É –ª–∞–¥–Ω–æ) –∑–∞—Ö–æ–¥–∏ –ø–æ—Ç–æ–º'
_msg7 = ('{}! –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—á–∫–∏, –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - '
         '—Å–Ω–∏–º–∞—é—Ç—Å—è. –ù–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è {} —Å–µ–∫—É–Ω–¥, —Ç–∞–∫–∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö {} –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ {} '
         '–∂–∏–∑–Ω–µ–π. –ö–æ–≥–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏—à—å –≤—Å–µ –∂–∏–∑–Ω–∏, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.\n\n–ù—É —á—Ç–æ, –∏–≥—Ä–∞–µ–º?\n‚úÖ –î–ê –∏–ª–∏ ‚ùå –ù–ï–¢\n\n–°–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å '
         '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "{}", –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π - –°–ª–æ–∂–Ω–æ—Å—Ç—å')
_msg8 = ('–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–µ—à—å?\n\n'
         'üòÄ –õ–µ–≥–∫–æ - 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç, 10 –∂–∏–∑–Ω–µ–π, 10 –ø–æ–¥—Å–∫–∞–∑–æ–∫, 1 '
         '–æ—á–∫–æ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n'
         'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ - 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç, 5 –∂–∏–∑–Ω–µ–π, 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫, 2 '
         '–æ—á–∫–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n'
         'üò° –°–ª–æ–∂–Ω–æ - 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç, 3 –∂–∏–∑–Ω–∏, 3 –ø–æ–¥—Å–∫–∞–∑–æ–∫–∏, 3 '
         '–æ—á–∫–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.')
_msg9 = '–¢—ã –≤—ã–±—Ä–∞–ª{} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - {}\n\n–ù–∞—á–Ω—ë–º –∏–≥—Ä—É?\n\n‚úÖ –î–ê –∏–ª–∏ ‚ùå –ù–ï–¢'
_msg10 = '–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º, –Ω–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è {} —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{}{}'
_msg11 = '–û—á–µ–Ω—å –∂–∞–ª—å, –º–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.'
_msg12 = '–ß—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã –≤–≤–µ–¥–∏ "–î–ê" –∏–ª–∏ "–ù–ï–¢"'
_msg13 = '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòí'
_msg14 = '–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –æ–¥–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ üòù'
_msg15 = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ ‚ûï{} {}.{}\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{}{}'
_msg16 = '{}–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòä\n–¢—ã —Å–º–æ–≥{} –Ω–∞–±—Ä–∞—Ç—å {} –æ—á–∫–æ–≤ –∏ {}\n\n–ü–æ–≤—Ç–æ—Ä–∏–º? –î–∞ –∏–ª–∏ –ù–ï–¢'
_msg17 = '{}–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - {}{}\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{}{}'

id_doc_logo = 'doc38487286_527864911'


_BD = Sqlbd('qest')
_BD_USERDATA = Sqlbd('userdata')


@addon_init(['!–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'], 'üéÆ', False, 1)
class Qest(Addon):
    __slots__ = ('_LAST_ANSWER', '_QEST_POINT', '_ADD_HELP', '_WRONG_ANSWER',
                 '_ADD_HELP_LOCK', 'wait', '_L', '_T', '_H', 'level', '_PP', '_WA')

    def __init__(self, username, user_id):
        super(Qest, self).__init__(username, user_id)
        self.lock = 2
        self._LAST_ANSWER = ''
        self._QEST_POINT = 0
        self._ADD_HELP = 0
        self._WRONG_ANSWER = 0
        self._ADD_HELP_LOCK = 0
        self.wait = 0
        self._T = 30
        self._H = 5
        self._L = 5
        self.level = '–ù–û–†–ú–ê–õ–¨–ù–û'
        self._PP = 3
        self._WA = 1

    async def waits(self, event: Event, index_wait: int):
        for task in qest_tasks:
            if task.done():
                qest_tasks.remove(task)

        await asyncio.sleep(self._T)
        if self.wait == index_wait:
            if self._WRONG_ANSWER >= self._H:
                point = self._QEST_POINT
                self.setstep(1000)
                await _BD.put(self.user_id, point)

                await event.answer(_msg1,
                                   event.gender("", "–ª–∞"),
                                   its(point),
                                   self.get_top(point)
                                   ).keyboard(*keyb3).send()
                del event

            else:
                last_answer = self._LAST_ANSWER[0]
                answer = self._qest()
                h = ''
                if self._QEST_POINT >= self._PP:
                    h = f'‚ûñ{its(self._PP)} {word_point[self._PP]}, '
                    self._QEST_POINT -= self._PP
                self._WRONG_ANSWER += 1
                self._LAST_ANSWER = answer[1]
                qest_tasks.append(asyncio.create_task(self.waits(event, self.wait + 1)))
                self.wait += 1

                await event.answer(_msg2, h,
                                   last_answer,
                                   self.score(),
                                   answer[0],
                                   self.help_qest(answer[1])
                                   ).send()
        else:
            return False

    def upd(self):
        self.end()
        self._LAST_ANSWER = ''
        self._QEST_POINT = 0
        self._ADD_HELP = 0
        self._WRONG_ANSWER = 0
        self._ADD_HELP_LOCK = 0

    def _qest(self) -> list:
        code = f'SELECT * FROM qest WHERE id = {rnd.randint(0, 124410)};'
        connection = sqlite3.connect(f'db/qest.db')
        crsr = connection.cursor()
        crsr.execute(code)
        ans = crsr.fetchall()
        connection.close()
        ans = ans[0]
        return [ans[1], [ans[2]]]

    def score(self) -> str:
        s = '\n–°—á—ë—Ç: ' + its(self._QEST_POINT)
        l = '\n–ñ–∏–∑–Ω–µ–π: ' + its(self._L - self._WRONG_ANSWER)
        h = '\n–ü–æ–¥—Å–∫–∞–∑–æ–∫: ' + its(self._H - self._ADD_HELP)
        return s + l + h + '\n'

    def get_top(self, p) -> str:
        tempdict = {}
        for i in _BD.get_all(sync=True):
            if tempdict.get(i[0], 0) <= i[1]:
                tempdict[i[0]] = i[1]

        b = sorted(tempdict.items(), key=itemgetter(1), reverse=True)[0]
        tempdict[self.user_id] = p
        point = sorted(tempdict.items(), key=itemgetter(1), reverse=True)

        ind = 0
        for i in point:
            ind += 1
            if i[0] == self.user_id:
                break

        if b[0] == self.user_id:
            t = f'–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ {its(b[1])}!'
        else:
            s = _BD_USERDATA.get(b[0], item='fname', sync=True)
            s = s[0][0]
            t = f'–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É - {s} {its(b[1])}'

        return f'–∑–∞–Ω–∏–º–∞–µ—à—å {its(ind)} –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ {its(len(point))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã, {t}'

    def help_qest(self, answer, level=1) -> str:
        rer = []
        lq = '\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: ' + answer[0][0]
        if self._ADD_HELP > 10 or self._ADD_HELP_LOCK != 0:
            hq = ''
        else:
            hq = '\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ –ø–∏—à–∏ "–ø–æ–¥—Å–∫–∞–∑–∫–∞"'

        if len(answer[0]) > 4 or level != 1:
            f = 0
            while f < level:
                r = rnd.randint(0, len(answer[0]) - 2)
                if r not in rer:
                    rer.append(r)
                    f += 1
            ind = 0
            word = ''
            for i in answer[0][1::]:
                if ind in rer:
                    word += i
                elif i == ' ':
                    word += ' '
                else:
                    word += '*'
                ind += 1
            return lq + word + hq

        else:
            return lq + '*' * (len(answer[0]) - 1) + hq

    async def mainapp(self, event: Event) -> Event:
        for task in qest_tasks:
            if task.done():
                qest_tasks.remove(task)

        message = re.quest1.sub('', event.text).upper().strip()

        if event.stoper():
            point = self._QEST_POINT
            self.upd()
            await _BD.put(self.user_id, point)

            if point:
                return event.answer(_msg3,
                                    event.gender("", "–∞"),
                                    its(point),
                                    self.get_top(point))
            else:
                return event.answer(str_menu_out)

        if self.isstep(0, 1):
            return event.answer(_msg4, self.username).keyboard(*keyb3)

        if self.isstep(1000):
            if event.check('–î–ê'):
                self.upd()
                self.setstep(2)
                answer = self._qest()
                self._LAST_ANSWER = answer[1]

                qest_tasks.append(asyncio.create_task(self.waits(event, self.wait)))
                return event.answer(_msg5, answer[0], self.help_qest(answer[1])).keyboard(*keyb)

            elif event.check('–°–õ–û–ñ–ù–û–°–¢–¨', '–ò–ù–§–û'):
                self.setstep(1)

            else:
                self.upd()
                return event.answer(_msg6).keyboard()

        if self.isstep(1):
            if event.check('–ò–ù–§–û', '!–ò–ù–§–û'):
                event.keyboard(*keyb3).attachment(id_doc_logo)
                return event.answer(_msg7, self.username,
                                    self._T, self._H,
                                    self._L, self.level.lower())

            if event.check('–°–õ–û–ñ–ù–û–°–¢–¨'):
                return event.answer(_msg8).keyboard(*keyb5)

            if event.check(*qlevl):
                message = re.quest1.sub('', event.text).upper().strip()
                self._T = qlevl[message][0]
                self._H = qlevl[message][1]
                self._L = qlevl[message][2]
                self._PP = qlevl[message][3]
                self._WA = qlevl[message][4]
                self.level = message
                return event.answer(_msg9, event.gender('', '–∞'), message.lower()).keyboard(*keyb3)

            if event.check('–î–ê'):
                self.setstep(2)
                answer = self._qest()
                self._LAST_ANSWER = answer[1]
                qest_tasks.append(asyncio.create_task(self.waits(event, self.wait)))
                return event.answer(_msg10, self._T, answer[0],
                                    self.help_qest(answer[1])).keyboard(*keyb)

            elif event.check('–ù–ï–¢'):
                self.upd()
                return event.answer(_msg11).keyboard()

            else:
                return event.answer(_msg12).keyboard(*keyb3)

        if self.isstep(2):
            if event.check('–ü–û–î–°–ö–ê–ó–ö–ê'):
                if self._ADD_HELP >= self._L:
                    return event.answer(_msg13).keyboard(*keyb4)

                elif self._ADD_HELP_LOCK == 1:
                    return event.answer(_msg14).keyboard(*keyb2)

                else:
                    self._ADD_HELP_LOCK = 1
                    if self._WA:
                        if self._QEST_POINT >= self._WA:
                            self._QEST_POINT -= self._WA
                            h = f'‚ûñ{its(self._WA)} {word_point[self._WA]}'
                        else:
                            h = ''
                    else:
                        h = ''
                    self._ADD_HELP += 1
                    ln = self._LAST_ANSWER
                    out = self.help_qest(ln, level=int(len(ln[0]) // 2))
                    return event.answer(f'{out}\n\n{h}{self.score()}').keyboard(*keyb2)

            qest_tasks.append(asyncio.create_task(self.waits(event, self.wait + 1)))
            self.wait += 1

            hide = event.check('–ü–†–û–ü–£–°–¢–ò–¢–¨')

            LAST_ANSWER = []
            for i in self._LAST_ANSWER:
                LAST_ANSWER.append(i.lower())

            if len(message) >= 5:
                if until.distance(message.lower(), ' '.join(LAST_ANSWER)) < 2:
                    message = LAST_ANSWER[0]

            if message.lower() in LAST_ANSWER:
                self._ADD_HELP_LOCK = 0
                self._QEST_POINT += self._PP
                answer = self._qest()
                self._LAST_ANSWER = answer[1]
                return event.answer(_msg15, its(self._PP), word_point[self._PP],
                                    self.score(), answer[0], self.help_qest(answer[1])
                                    ).keyboard(*keyb)
            else:

                self._ADD_HELP_LOCK = 0
                if self._WRONG_ANSWER >= self._H:
                    point = self._QEST_POINT
                    self.setstep(1000)
                    await _BD.put(self.user_id, point)
                    head = 'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø'
                    if hide:
                        head = '–ü'

                    return event.answer(_msg16, head, event.gender("", "–ª–∞"),
                                        its(point), self.get_top(point)
                                        ).keyboard(*keyb3)

                else:
                    head = 'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤'
                    if hide:
                        head = '–í'
                    if self._QEST_POINT >= self._PP:
                        self._QEST_POINT -= self._PP
                        head = f'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ûñ{its(self._PP)} {word_point[self._PP]}, –≤'
                        if hide:
                            head = f'‚ûñ{its(self._PP)} {word_point[self._PP]}, –≤'
                    self._WRONG_ANSWER += 1
                    last_answer = self._LAST_ANSWER[0]
                    answer = self._qest()
                    self._LAST_ANSWER = answer[1]

                    return event.answer(_msg17, head, last_answer, self.score(),
                                        answer[0], self.help_qest(answer[1])
                                        ).keyboard(*keyb)
