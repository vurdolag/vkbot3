# -*- coding: utf-8 -*-
from untils import until, Event
from Addon import Addon, middelware, addon_init
from Template import str_back

L = {'–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π': 'az', '–º–∞–ª–∞—è–ª–∞–º': 'ml', '–∞–ª–±–∞–Ω—Å–∫–∏–π': 'sq', '–º–∞–ª—å—Ç–∏–π—Å–∫–∏–π': 'mt', '–∞–º—Ö–∞—Ä—Å–∫–∏–π': 'am',
                  '–º–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π': 'mk', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en', '–º–∞–æ—Ä–∏': 'mi', '–∞—Ä–∞–±—Å–∫–∏–π': 'ar', '–º–∞—Ä–∞—Ç—Ö–∏': 'mr',
                  '–∞—Ä–º—è–Ω—Å–∫–∏–π': 'hy', '–º–∞—Ä–∏–π—Å–∫–∏–π': 'mhr', '–∞—Ñ—Ä–∏–∫–∞–∞–Ω—Å': 'af', '–º–æ–Ω–≥–æ–ª—å—Å–∫–∏–π': 'mn', '–±–∞—Å–∫—Å–∫–∏–π': 'eu',
                  '–Ω–µ–º–µ—Ü–∫–∏–π': 'de', '–±–∞—à–∫–∏—Ä—Å–∫–∏–π': 'ba', '–Ω–µ–ø–∞–ª—å—Å–∫–∏–π': 'ne', '–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π': 'be', '–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π': 'no',
                  '–±–µ–Ω–≥–∞–ª—å—Å–∫–∏–π': 'bn', '–ø–∞–Ω–¥–∂–∞–±–∏': 'pa', '–±–∏—Ä–º–∞–Ω—Å–∫–∏–π': 'my', '–ø–∞–ø—å—è–º–µ–Ω—Ç–æ': 'pap', '–±–æ–ª–≥–∞—Ä—Å–∫–∏–π': 'bg',
                  '–ø–µ—Ä—Å–∏–¥—Å–∫–∏–π': 'fa', '–±–æ—Å–Ω–∏–π—Å–∫–∏–π': 'bs', '–ø–æ–ª—å—Å–∫–∏–π': 'pl', '–≤–∞–ª–ª–∏–π—Å–∫–∏–π': 'cy', '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π': 'pt',
                  '–≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π': 'hu', '—Ä—É–º—ã–Ω—Å–∫–∏–π': 'ro', '–≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π': 'vi', '—Ä—É—Å—Å–∫–∏–π': 'ru', '–≥–∞–∏—Ç—è–Ω—Å–∫–∏–π': 'ht',
                  '—Å–µ–±—É–∞–Ω—Å–∫–∏–π': 'ceb', '–≥–∞–ª–∏—Å–∏–π—Å–∫–∏–π': 'gl', '—Å–µ—Ä–±—Å–∫–∏–π': 'sr', '–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π': 'nl', '—Å–∏–Ω–≥–∞–ª—å—Å–∫–∏–π': 'si',
                  '–≥–æ—Ä–Ω–æ–º–∞—Ä–∏–π—Å–∫–∏–π': 'mrj', '—Å–ª–æ–≤–∞—Ü–∫–∏–π': 'sk', '–≥—Ä–µ—á–µ—Å–∫–∏–π': 'el', '—Å–ª–æ–≤–µ–Ω—Å–∫–∏–π': 'sl', '–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π': 'ka',
                  '—Å—É–∞—Ö–∏–ª–∏': 'sw', '–≥—É–¥–∂–∞—Ä–∞—Ç–∏': 'gu', '—Å—É–Ω–¥–∞–Ω—Å–∫–∏–π': 'su', '–¥–∞—Ç—Å–∫–∏–π': 'da', '—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π': 'tg',
                  '–∏–≤—Ä–∏—Ç': 'he', '—Ç–∞–π—Å–∫–∏–π': 'th', '–∏–¥–∏—à': 'yi', '—Ç–∞–≥–∞–ª—å—Å–∫–∏–π': 'tl', '–∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π': 'id',
                  '—Ç–∞–º–∏–ª—å—Å–∫–∏–π': 'ta', '–∏—Ä–ª–∞–Ω–¥—Å–∫–∏–π': 'ga', '—Ç–∞—Ç–∞—Ä—Å–∫–∏–π': 'tt', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π': 'it', '—Ç–µ–ª—É–≥—É': 'te',
                  '–∏—Å–ª–∞–Ω–¥—Å–∫–∏–π': 'is', '—Ç—É—Ä–µ—Ü–∫–∏–π': 'tr', '–∏—Å–ø–∞–Ω—Å–∫–∏–π': 'es', '—É–¥–º—É—Ä—Ç—Å–∫–∏–π': 'udm', '–∫–∞–∑–∞—Ö—Å–∫–∏–π': 'kk',
                  '—É–∑–±–µ–∫—Å–∫–∏–π': 'uz', '–∫–∞–Ω–Ω–∞–¥–∞': 'kn', '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π': 'uk', '–∫–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π': 'ca', '—É—Ä–¥—É': 'ur',
                  '–∫–∏—Ä–≥–∏–∑—Å–∫–∏–π': 'ky', '—Ñ–∏–Ω—Å–∫–∏–π': 'fi', '–∫–∏—Ç–∞–π—Å–∫–∏–π': 'zh', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr', '–∫–æ—Ä–µ–π—Å–∫–∏–π': 'ko',
                  '—Ö–∏–Ω–¥–∏': 'hi', '–∫–æ—Å–∞': 'xh', '—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π': 'hr', '–∫—Ö–º–µ—Ä—Å–∫–∏–π': 'km', '—á–µ—à—Å–∫–∏–π': 'cs', '–ª–∞–æ—Å—Å–∫–∏–π': 'lo',
                  '—à–≤–µ–¥—Å–∫–∏–π': 'sv', '–ª–∞—Ç—ã–Ω—å': 'la', '—à–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π': 'gd', '–ª–∞—Ç—ã—à—Å–∫–∏–π': 'lv', '—ç—Å—Ç–æ–Ω—Å–∫–∏–π': 'et',
                  '–ª–∏—Ç–æ–≤—Å–∫–∏–π': 'lt', '—ç—Å–ø–µ—Ä–∞–Ω—Ç–æ': 'eo', '–ª—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π': 'lb', '—è–≤–∞–Ω—Å–∫–∏–π': 'jv', '–º–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π': 'mg',
                  '—è–ø–æ–Ω—Å–∫–∏–π': 'ja', '–º–∞–ª–∞–π—Å–∫–∏–π': 'ms'}

keyb = ['!–í—Å–µ —è–∑—ã–∫–∏%b', str_back]
keyb2 = ['!–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫%b', '!–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞%b', str_back]


NotWork = 0
Start = 1
ChangeLang = 2


@addon_init(["!–ü–ï–†–ï–í–û–î–ß–ò–ö", '–ü–ï–†–ï–í–û–î'], 'üá¨üáß', True, 3)
class Translator(Addon):
    __slots__ = 'LANG', 'now_lang', 'first'

    def __init__(self, username, user_id):
        super(Translator, self).__init__(username, user_id)
        self.lock = 1
        self.LANG = self.state('LANG', 'en-ru')
        self.now_lang = self.state('now_lang', ['–ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', '–†—É—Å—Å–∫–∏–π'])
        self.first = self.state('first_translator', 1, return_value=0)

    def get_lang_list(self):
        return list(L.keys())

    def state(self, key, value, update=False, return_value=-1):
        return self.set_condition(self.user_id, key, value, update, return_value)

    async def choise_lang(self, event: Event) -> Event:
        message = event.text.lower().split()
        if len(message) != 2:
            return event.answer('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n–ü—Ä–∏–º–µ—Ä: —è–ø–æ–Ω—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π')

        m1, m2 = message[0], message[1]

        a = L.get(m1, 0)
        b = L.get(m2, 0)

        if a == 0 or b == 0:
            l = self.get_lang_list()
            for i in l:
                if i[0] == m1[0]:
                    if event.distance(i, m1) <= 2:
                        a = i
                if i[0] == m2[0]:
                    if event.distance(i, m2) <= 2:
                        b = i

            m1, m2 = a, b
            a = L.get(a, 0)
            b = L.get(b, 0)
            if a == 0 or b == 0:
                return event.answer(f'–í–∏–¥–∏–º–æ —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ —É –º–µ–Ω—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ –∏–ª–∏ —Ç—ã '
                                    f'{event.gender("–¥–æ–ø—É—Å—Ç–∏–ª", "–¥–æ–ø—É—Å—Ç–∏–ª–∞")}'
                                    f' –æ—à–∏–±–∫—É...\n\n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —è–∑—ã–∫–∏ —è '
                                    f'–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥–æ–π !–í—Å–µ —è–∑—ã–∫–∏')

        self.LANG = a + '-' + b
        if self.step:
            self.setstep(Start)
        self.now_lang = [m1, m2]

        self.state('now_lang', self.now_lang, update=True)
        self.state('LANG', self.LANG, update=True)

        if self.step:
            return event.answer(f'–¢—ã {event.gender("–≤—ã–±—Ä–∞–ª", "–≤—ã–±—Ä–∞–ª–∞")} {m1} –∏ {m2}')
        else:
            return event

    async def get_translate(self, event: Event) -> Event:
        return event.answer(f'–ü–µ—Ä–µ–≤–æ–¥:\n{await event.translate(event.text, self.LANG)}')

    @middelware
    async def mainapp(self, event: Event) -> Event:
        if event.check('!–í–°–ï –Ø–ó–´–ö–ò', '/–í–°–ï –Ø–ó–´–ö–ò') and self.step >= 1:
            a = ''
            for i in list(L.keys()):
                a += i + '\n'
            return event.answer(a).keyboard(*keyb)

        if event.check('!–ë–´–°–¢–†–ê–Ø –ö–û–ú–ê–ù–î–ê'):
            return event.answer('–î–æ—Å—Ç—É–ø–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–º–µ—Ä:\n\n'
                                '?? [—è–∑—ã–∫–∏] [—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞]\n'
                                '–∏–ª–∏ –µ—Å–ª–∏ —è–∑—ã–∫–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã\n'
                                '?? [—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞]'
                                ).keyboard(*keyb2).attachment('photo-168691465_457250877')

        if event.check('!–°–ú–ï–ù–ò–¢–¨ –Ø–ó–´–ö', '/–°–ú–ï–ù–ò–¢–¨ –Ø–ó–´–ö' '!OTHER LANGUAGE'):
            self.setstep(ChangeLang)
            return event.answer('–° –∫–∞–∫–æ–≥–æ –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏? '
                                '–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —è–∑—ã–∫–æ–≤ –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n'
                                '—Ä—É—Å—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π').keyboard(*keyb)

        if self.isstep(NotWork, Start):
            if self.first == 0:
                self.first = 1
                return event.answer(f'{self.username}, —è –º–æ–≥—É –ø—Ä–µ–≤–µ—Å—Ç–∏ —Å {self.now_lang[0]} –Ω–∞ '
                                    f'{self.now_lang[1]}, —á—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?\n\n'
                                    f'–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π - !–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
                                    ).keyboard(*keyb2)
            else:
                return event.answer(f'–í—ã–±—Ä–∞–Ω—ã —è–∑—ã–∫–∏:\n{self.now_lang[0]} - '
                                    f'{self.now_lang[1]}\n–ß—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?\n\n'
                                    f'‚û° !–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n'
                                    f'‚û° !–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞'
                                    ).keyboard(*keyb2)

        if self.isstep(Start):
            event.keyboard(*keyb2)
            if event.text:
                return await self.get_translate(event)
            else:
                return event.answer('–ù–µ—Ç—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')

        if self.isstep(ChangeLang):
            event.keyboard(*keyb)
            return await self.choise_lang(event)



















